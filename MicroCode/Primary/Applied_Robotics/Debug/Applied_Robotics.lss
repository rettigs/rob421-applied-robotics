
Applied_Robotics.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000074c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000049  00800200  00800200  000007c0  2**0
                  ALLOC
  2 .comment      00000030  00000000  00000000  000007c0  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 000000e8  00000000  00000000  000007f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000b42  00000000  00000000  000008d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000036c  00000000  00000000  0000141a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000008bb  00000000  00000000  00001786  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000003b8  00000000  00000000  00002044  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000475  00000000  00000000  000023fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000b49  00000000  00000000  00002871  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000000d8  00000000  00000000  000033ba  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	31 c2       	rjmp	.+1122   	; 0x470 <__vector_3>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	0f c2       	rjmp	.+1054   	; 0x434 <__vector_5>
  16:	00 00       	nop
  18:	17 c2       	rjmp	.+1070   	; 0x448 <__vector_6>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	8a c1       	rjmp	.+788    	; 0x372 <__vector_23>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	2a c2       	rjmp	.+1108   	; 0x4ba <__vector_25>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ec e4       	ldi	r30, 0x4C	; 76
  fc:	f7 e0       	ldi	r31, 0x07	; 7
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a0 30       	cpi	r26, 0x00	; 0
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a0 e0       	ldi	r26, 0x00	; 0
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a9 34       	cpi	r26, 0x49	; 73
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	c5 d0       	rcall	.+394    	; 0x2aa <main>
 120:	13 c3       	rjmp	.+1574   	; 0x748 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <uartInit>:
	PIDsetTunings(6,0.6,0.6);
	//Start controller
	PIDinitialize();
	//Set Setpoint to 0 RPM
	Setpoint = 0;
}
 124:	e1 ec       	ldi	r30, 0xC1	; 193
 126:	f0 e0       	ldi	r31, 0x00	; 0
 128:	80 81       	ld	r24, Z
 12a:	88 69       	ori	r24, 0x98	; 152
 12c:	80 83       	st	Z, r24
 12e:	a2 ec       	ldi	r26, 0xC2	; 194
 130:	b0 e0       	ldi	r27, 0x00	; 0
 132:	8c 91       	ld	r24, X
 134:	86 60       	ori	r24, 0x06	; 6
 136:	8c 93       	st	X, r24
 138:	80 81       	ld	r24, Z
 13a:	80 68       	ori	r24, 0x80	; 128
 13c:	80 83       	st	Z, r24
 13e:	10 92 c5 00 	sts	0x00C5, r1
 142:	87 e6       	ldi	r24, 0x67	; 103
 144:	80 93 c4 00 	sts	0x00C4, r24
 148:	08 95       	ret

0000014a <timer0Init>:
 14a:	ee e6       	ldi	r30, 0x6E	; 110
 14c:	f0 e0       	ldi	r31, 0x00	; 0
 14e:	80 81       	ld	r24, Z
 150:	81 60       	ori	r24, 0x01	; 1
 152:	80 83       	st	Z, r24
 154:	85 b5       	in	r24, 0x25	; 37
 156:	84 60       	ori	r24, 0x04	; 4
 158:	85 bd       	out	0x25, r24	; 37
 15a:	16 bc       	out	0x26, r1	; 38
 15c:	08 95       	ret

0000015e <timer1Init>:
 15e:	e0 e8       	ldi	r30, 0x80	; 128
 160:	f0 e0       	ldi	r31, 0x00	; 0
 162:	80 81       	ld	r24, Z
 164:	83 6a       	ori	r24, 0xA3	; 163
 166:	80 83       	st	Z, r24
 168:	e1 e8       	ldi	r30, 0x81	; 129
 16a:	f0 e0       	ldi	r31, 0x00	; 0
 16c:	80 81       	ld	r24, Z
 16e:	89 60       	ori	r24, 0x09	; 9
 170:	80 83       	st	Z, r24
 172:	84 b1       	in	r24, 0x04	; 4
 174:	80 66       	ori	r24, 0x60	; 96
 176:	84 b9       	out	0x04, r24	; 4
 178:	10 92 89 00 	sts	0x0089, r1
 17c:	10 92 88 00 	sts	0x0088, r1
 180:	10 92 8b 00 	sts	0x008B, r1
 184:	10 92 8a 00 	sts	0x008A, r1
 188:	08 95       	ret

0000018a <timer3Init>:
 18a:	e0 e9       	ldi	r30, 0x90	; 144
 18c:	f0 e0       	ldi	r31, 0x00	; 0
 18e:	80 81       	ld	r24, Z
 190:	82 6c       	ori	r24, 0xC2	; 194
 192:	80 83       	st	Z, r24
 194:	e1 e9       	ldi	r30, 0x91	; 145
 196:	f0 e0       	ldi	r31, 0x00	; 0
 198:	80 81       	ld	r24, Z
 19a:	8c 61       	ori	r24, 0x1C	; 28
 19c:	80 83       	st	Z, r24
 19e:	82 ee       	ldi	r24, 0xE2	; 226
 1a0:	94 e0       	ldi	r25, 0x04	; 4
 1a2:	90 93 97 00 	sts	0x0097, r25
 1a6:	80 93 96 00 	sts	0x0096, r24
 1aa:	90 93 99 00 	sts	0x0099, r25
 1ae:	80 93 98 00 	sts	0x0098, r24
 1b2:	6b 9a       	sbi	0x0d, 3	; 13
 1b4:	08 95       	ret

000001b6 <timer5Init>:
 1b6:	e1 e2       	ldi	r30, 0x21	; 33
 1b8:	f1 e0       	ldi	r31, 0x01	; 1
 1ba:	80 81       	ld	r24, Z
 1bc:	87 60       	ori	r24, 0x07	; 7
 1be:	80 83       	st	Z, r24
 1c0:	10 92 25 01 	sts	0x0125, r1
 1c4:	10 92 24 01 	sts	0x0124, r1
 1c8:	08 95       	ret

000001ca <externalInterrupts>:
 1ca:	52 98       	cbi	0x0a, 2	; 10
 1cc:	5a 9a       	sbi	0x0b, 2	; 11
 1ce:	6d 98       	cbi	0x0d, 5	; 13
 1d0:	75 9a       	sbi	0x0e, 5	; 14
 1d2:	e9 e6       	ldi	r30, 0x69	; 105
 1d4:	f0 e0       	ldi	r31, 0x00	; 0
 1d6:	80 81       	ld	r24, Z
 1d8:	80 62       	ori	r24, 0x20	; 32
 1da:	80 83       	st	Z, r24
 1dc:	ea e6       	ldi	r30, 0x6A	; 106
 1de:	f0 e0       	ldi	r31, 0x00	; 0
 1e0:	80 81       	ld	r24, Z
 1e2:	8a 60       	ori	r24, 0x0A	; 10
 1e4:	80 83       	st	Z, r24
 1e6:	8d b3       	in	r24, 0x1d	; 29
 1e8:	84 63       	ori	r24, 0x34	; 52
 1ea:	8d bb       	out	0x1d, r24	; 29
 1ec:	08 95       	ret

000001ee <uartSendc>:
 1ee:	90 91 c0 00 	lds	r25, 0x00C0
 1f2:	95 ff       	sbrs	r25, 5
 1f4:	fc cf       	rjmp	.-8      	; 0x1ee <uartSendc>
 1f6:	80 93 c6 00 	sts	0x00C6, r24
 1fa:	08 95       	ret

000001fc <driveStepper>:
 1fc:	28 b1       	in	r18, 0x08	; 8
 1fe:	20 7f       	andi	r18, 0xF0	; 240
 200:	28 b9       	out	0x08, r18	; 8
 202:	20 e0       	ldi	r18, 0x00	; 0
 204:	30 e0       	ldi	r19, 0x00	; 0
 206:	66 23       	and	r22, r22
 208:	51 f1       	breq	.+84     	; 0x25e <driveStepper+0x62>
 20a:	28 17       	cp	r18, r24
 20c:	39 07       	cpc	r19, r25
 20e:	19 f1       	breq	.+70     	; 0x256 <driveStepper+0x5a>
 210:	43 98       	cbi	0x08, 3	; 8
 212:	40 9a       	sbi	0x08, 0	; 8
 214:	ef e3       	ldi	r30, 0x3F	; 63
 216:	ff e1       	ldi	r31, 0x1F	; 31
 218:	31 97       	sbiw	r30, 0x01	; 1
 21a:	f1 f7       	brne	.-4      	; 0x218 <driveStepper+0x1c>
 21c:	00 c0       	rjmp	.+0      	; 0x21e <driveStepper+0x22>
 21e:	00 00       	nop
 220:	40 98       	cbi	0x08, 0	; 8
 222:	41 9a       	sbi	0x08, 1	; 8
 224:	ef e3       	ldi	r30, 0x3F	; 63
 226:	ff e1       	ldi	r31, 0x1F	; 31
 228:	31 97       	sbiw	r30, 0x01	; 1
 22a:	f1 f7       	brne	.-4      	; 0x228 <driveStepper+0x2c>
 22c:	00 c0       	rjmp	.+0      	; 0x22e <driveStepper+0x32>
 22e:	00 00       	nop
 230:	41 98       	cbi	0x08, 1	; 8
 232:	42 9a       	sbi	0x08, 2	; 8
 234:	ef e3       	ldi	r30, 0x3F	; 63
 236:	ff e1       	ldi	r31, 0x1F	; 31
 238:	31 97       	sbiw	r30, 0x01	; 1
 23a:	f1 f7       	brne	.-4      	; 0x238 <driveStepper+0x3c>
 23c:	00 c0       	rjmp	.+0      	; 0x23e <driveStepper+0x42>
 23e:	00 00       	nop
 240:	42 98       	cbi	0x08, 2	; 8
 242:	43 9a       	sbi	0x08, 3	; 8
 244:	ef e3       	ldi	r30, 0x3F	; 63
 246:	ff e1       	ldi	r31, 0x1F	; 31
 248:	31 97       	sbiw	r30, 0x01	; 1
 24a:	f1 f7       	brne	.-4      	; 0x248 <driveStepper+0x4c>
 24c:	00 c0       	rjmp	.+0      	; 0x24e <driveStepper+0x52>
 24e:	00 00       	nop
 250:	2f 5f       	subi	r18, 0xFF	; 255
 252:	3f 4f       	sbci	r19, 0xFF	; 255
 254:	da cf       	rjmp	.-76     	; 0x20a <driveStepper+0xe>
 256:	88 b1       	in	r24, 0x08	; 8
 258:	80 7f       	andi	r24, 0xF0	; 240
 25a:	88 b9       	out	0x08, r24	; 8
 25c:	08 95       	ret
 25e:	28 17       	cp	r18, r24
 260:	39 07       	cpc	r19, r25
 262:	c9 f3       	breq	.-14     	; 0x256 <driveStepper+0x5a>
 264:	41 98       	cbi	0x08, 1	; 8
 266:	40 9a       	sbi	0x08, 0	; 8
 268:	ef e3       	ldi	r30, 0x3F	; 63
 26a:	ff e1       	ldi	r31, 0x1F	; 31
 26c:	31 97       	sbiw	r30, 0x01	; 1
 26e:	f1 f7       	brne	.-4      	; 0x26c <driveStepper+0x70>
 270:	00 c0       	rjmp	.+0      	; 0x272 <driveStepper+0x76>
 272:	00 00       	nop
 274:	40 98       	cbi	0x08, 0	; 8
 276:	43 9a       	sbi	0x08, 3	; 8
 278:	ef e3       	ldi	r30, 0x3F	; 63
 27a:	ff e1       	ldi	r31, 0x1F	; 31
 27c:	31 97       	sbiw	r30, 0x01	; 1
 27e:	f1 f7       	brne	.-4      	; 0x27c <driveStepper+0x80>
 280:	00 c0       	rjmp	.+0      	; 0x282 <driveStepper+0x86>
 282:	00 00       	nop
 284:	43 98       	cbi	0x08, 3	; 8
 286:	42 9a       	sbi	0x08, 2	; 8
 288:	ef e3       	ldi	r30, 0x3F	; 63
 28a:	ff e1       	ldi	r31, 0x1F	; 31
 28c:	31 97       	sbiw	r30, 0x01	; 1
 28e:	f1 f7       	brne	.-4      	; 0x28c <driveStepper+0x90>
 290:	00 c0       	rjmp	.+0      	; 0x292 <driveStepper+0x96>
 292:	00 00       	nop
 294:	42 98       	cbi	0x08, 2	; 8
 296:	41 9a       	sbi	0x08, 1	; 8
 298:	ef e3       	ldi	r30, 0x3F	; 63
 29a:	ff e1       	ldi	r31, 0x1F	; 31
 29c:	31 97       	sbiw	r30, 0x01	; 1
 29e:	f1 f7       	brne	.-4      	; 0x29c <driveStepper+0xa0>
 2a0:	00 c0       	rjmp	.+0      	; 0x2a2 <driveStepper+0xa6>
 2a2:	00 00       	nop
 2a4:	2f 5f       	subi	r18, 0xFF	; 255
 2a6:	3f 4f       	sbci	r19, 0xFF	; 255
 2a8:	da cf       	rjmp	.-76     	; 0x25e <driveStepper+0x62>

000002aa <main>:

int main(void)
{
	uartInit();
 2aa:	3c df       	rcall	.-392    	; 0x124 <uartInit>
	timer0Init();
 2ac:	4e df       	rcall	.-356    	; 0x14a <timer0Init>
	timer1Init();
 2ae:	57 df       	rcall	.-338    	; 0x15e <timer1Init>
//	timer2Init();
	timer3Init();
 2b0:	6c df       	rcall	.-296    	; 0x18a <timer3Init>
	timer5Init(); 
 2b2:	81 df       	rcall	.-254    	; 0x1b6 <timer5Init>
	externalInterrupts();
 2b4:	8a df       	rcall	.-236    	; 0x1ca <externalInterrupts>
	//PB7 is Digital 13 (also LED)
	DDRB |= (1<<PB4) | (1<<PB7);
 2b6:	84 b1       	in	r24, 0x04	; 4
 2b8:	80 69       	ori	r24, 0x90	; 144
 2ba:	84 b9       	out	0x04, r24	; 4
	//set PC0-3 to output for stepper control
	//PC0-PC3 are used for stepper control
	//PC0=37,   PC1=36,   PC2=35,   PC3=34
	DDRC |= (1<<PC0) | (1<<PC1) | (1<<PC2) | (1<<PC3);
 2bc:	87 b1       	in	r24, 0x07	; 7
 2be:	8f 60       	ori	r24, 0x0F	; 15
 2c0:	87 b9       	out	0x07, r24	; 7
		
	sei();
 2c2:	78 94       	sei
					//Reload Command
					//TT= 01
					//HEX CODE: 40 00 00
					if(uartData[0] == 0b01000000){
						//Move servo backward.
						OCR3A = 1235;
 2c4:	c3 ed       	ldi	r28, 0xD3	; 211
 2c6:	d4 e0       	ldi	r29, 0x04	; 4
		
	sei();
	
    while(1)
	    {
				if(uartPacketReady == true){
 2c8:	80 91 00 02 	lds	r24, 0x0200
 2cc:	88 23       	and	r24, r24
 2ce:	09 f4       	brne	.+2      	; 0x2d2 <main+0x28>
 2d0:	49 c0       	rjmp	.+146    	; 0x364 <main+0xba>
					//Echo back received data
					uartSendc(uartData[0]);
 2d2:	80 91 02 02 	lds	r24, 0x0202
 2d6:	8b df       	rcall	.-234    	; 0x1ee <uartSendc>
					uartSendc(uartData[1]);
 2d8:	80 91 03 02 	lds	r24, 0x0203
 2dc:	88 df       	rcall	.-240    	; 0x1ee <uartSendc>
					uartSendc(uartData[2]);
 2de:	80 91 04 02 	lds	r24, 0x0204
 2e2:	85 df       	rcall	.-246    	; 0x1ee <uartSendc>
					//Serial Command Packet: TTIIIIID
					//TT=00 (motor). IIIII=00000 (launcher motor). D=0/1 (forward/backward)
					
					//Motor 0 (launcher) forward control
					//HEX CODE: 00 XX XX
					if(uartData[0] == 0b00000000){
 2e4:	80 91 02 02 	lds	r24, 0x0202
 2e8:	81 11       	cpse	r24, r1
 2ea:	0b c0       	rjmp	.+22     	; 0x302 <main+0x58>
						//NOTE TOP IS 0X3FF!!!!
						PORTB &= ~(1<<PB7);
 2ec:	2f 98       	cbi	0x05, 7	; 5
						OCR1A = (uartData[1]<<8) | uartData[2];
 2ee:	20 91 03 02 	lds	r18, 0x0203
 2f2:	80 91 04 02 	lds	r24, 0x0204
 2f6:	90 e0       	ldi	r25, 0x00	; 0
 2f8:	92 2b       	or	r25, r18
 2fa:	90 93 89 00 	sts	0x0089, r25
 2fe:	80 93 88 00 	sts	0x0088, r24
	//					uartSendc(uartData[1]);
	//					uartSendc(uartData[2]);
					}	
					//Motor 0 (launcher) backward control
					//HEX CODE: 01	XX	XX	
					if(uartData[0] == 0b00000001){
 302:	80 91 02 02 	lds	r24, 0x0202
 306:	81 30       	cpi	r24, 0x01	; 1
 308:	59 f4       	brne	.+22     	; 0x320 <main+0x76>
						PORTB |= (1<<PB7);
 30a:	2f 9a       	sbi	0x05, 7	; 5
						OCR1A = (uartData[1]<<8) | uartData[2];
 30c:	20 91 03 02 	lds	r18, 0x0203
 310:	80 91 04 02 	lds	r24, 0x0204
 314:	90 e0       	ldi	r25, 0x00	; 0
 316:	92 2b       	or	r25, r18
 318:	90 93 89 00 	sts	0x0089, r25
 31c:	80 93 88 00 	sts	0x0088, r24

					}
					//Reload Command
					//TT= 01
					//HEX CODE: 40 00 00
					if(uartData[0] == 0b01000000){
 320:	80 91 02 02 	lds	r24, 0x0202
 324:	80 34       	cpi	r24, 0x40	; 64
 326:	21 f4       	brne	.+8      	; 0x330 <main+0x86>
						//Move servo backward.
						OCR3A = 1235;
 328:	d0 93 99 00 	sts	0x0099, r29
 32c:	c0 93 98 00 	sts	0x0098, r28
						//Reverse direction of Servo and move backward.

					}
					//Carriage (Motor 1) forward control
					//HEX CODE: 02 XX XX
					if(uartData[0] == 0b00000010){
 330:	80 91 02 02 	lds	r24, 0x0202
 334:	82 30       	cpi	r24, 0x02	; 2
 336:	41 f4       	brne	.+16     	; 0x348 <main+0x9e>
						//ToDo: need stepper motor/weight estimate for chassis.
						//counterclockwise rotation
						driveStepper(((uartData[1]<<8) | uartData[2]), 1);
 338:	20 91 03 02 	lds	r18, 0x0203
 33c:	80 91 04 02 	lds	r24, 0x0204
 340:	90 e0       	ldi	r25, 0x00	; 0
 342:	61 e0       	ldi	r22, 0x01	; 1
 344:	92 2b       	or	r25, r18
 346:	5a df       	rcall	.-332    	; 0x1fc <driveStepper>
					}
					//Carriage (Motor 1) backward control
					//HEX CODE: 03 XX XX
					if(uartData[0] == 0b00000011){
 348:	80 91 02 02 	lds	r24, 0x0202
 34c:	83 30       	cpi	r24, 0x03	; 3
 34e:	41 f4       	brne	.+16     	; 0x360 <main+0xb6>
						//ToDo: need stepper motor/weight estimate for chassis. 	
						//clockwise rotation
						driveStepper(((uartData[1]<<8) | uartData[2]), 0);
 350:	20 91 03 02 	lds	r18, 0x0203
 354:	80 91 04 02 	lds	r24, 0x0204
 358:	90 e0       	ldi	r25, 0x00	; 0
 35a:	60 e0       	ldi	r22, 0x00	; 0
 35c:	92 2b       	or	r25, r18
 35e:	4e df       	rcall	.-356    	; 0x1fc <driveStepper>
					}
					uartPacketReady = false;
 360:	10 92 00 02 	sts	0x0200, r1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 364:	8f e9       	ldi	r24, 0x9F	; 159
 366:	9f e0       	ldi	r25, 0x0F	; 15
 368:	01 97       	sbiw	r24, 0x01	; 1
 36a:	f1 f7       	brne	.-4      	; 0x368 <main+0xbe>
 36c:	00 c0       	rjmp	.+0      	; 0x36e <main+0xc4>
 36e:	00 00       	nop
 370:	ab cf       	rjmp	.-170    	; 0x2c8 <main+0x1e>

00000372 <__vector_23>:
				_delay_ms(1);
		}
}


ISR(TIMER0_OVF_vect){
 372:	1f 92       	push	r1
 374:	0f 92       	push	r0
 376:	0f b6       	in	r0, 0x3f	; 63
 378:	0f 92       	push	r0
 37a:	11 24       	eor	r1, r1
 37c:	0b b6       	in	r0, 0x3b	; 59
 37e:	0f 92       	push	r0
 380:	2f 93       	push	r18
 382:	3f 93       	push	r19
 384:	4f 93       	push	r20
 386:	5f 93       	push	r21
 388:	6f 93       	push	r22
 38a:	7f 93       	push	r23
 38c:	8f 93       	push	r24
 38e:	9f 93       	push	r25
 390:	af 93       	push	r26
 392:	bf 93       	push	r27
 394:	ef 93       	push	r30
 396:	ff 93       	push	r31
	//60 ticks is a second. 6 is a .1 sec
	//only send speed once a second.
	/*
		Ticks every 4 seconds.....
	*/
	if(tick == 16){
 398:	80 91 2c 02 	lds	r24, 0x022C
 39c:	80 31       	cpi	r24, 0x10	; 16
 39e:	91 f5       	brne	.+100    	; 0x404 <__vector_23+0x92>
		//Read number of pulses counted
		rotation = TCNT5; 
 3a0:	60 91 24 01 	lds	r22, 0x0124
 3a4:	70 91 25 01 	lds	r23, 0x0125
 3a8:	80 e0       	ldi	r24, 0x00	; 0
 3aa:	90 e0       	ldi	r25, 0x00	; 0
 3ac:	dc d0       	rcall	.+440    	; 0x566 <__floatunsisf>
 3ae:	60 93 05 02 	sts	0x0205, r22
 3b2:	70 93 06 02 	sts	0x0206, r23
 3b6:	80 93 07 02 	sts	0x0207, r24
 3ba:	90 93 08 02 	sts	0x0208, r25
		//reset counter. 
		TCNT5 = 0; 
 3be:	10 92 25 01 	sts	0x0125, r1
 3c2:	10 92 24 01 	sts	0x0124, r1
		//(pulse/sec)*(rotation/2000)*(60sec/min)
		RPM = (rotation*(3/100));		
 3c6:	60 91 05 02 	lds	r22, 0x0205
 3ca:	70 91 06 02 	lds	r23, 0x0206
 3ce:	80 91 07 02 	lds	r24, 0x0207
 3d2:	90 91 08 02 	lds	r25, 0x0208
 3d6:	20 e0       	ldi	r18, 0x00	; 0
 3d8:	30 e0       	ldi	r19, 0x00	; 0
 3da:	a9 01       	movw	r20, r18
 3dc:	52 d1       	rcall	.+676    	; 0x682 <__mulsf3>
 3de:	60 93 20 02 	sts	0x0220, r22
 3e2:	70 93 21 02 	sts	0x0221, r23
 3e6:	80 93 22 02 	sts	0x0222, r24
 3ea:	90 93 23 02 	sts	0x0223, r25
		uartSendc(rotation);
 3ee:	60 91 05 02 	lds	r22, 0x0205
 3f2:	70 91 06 02 	lds	r23, 0x0206
 3f6:	80 91 07 02 	lds	r24, 0x0207
 3fa:	90 91 08 02 	lds	r25, 0x0208
 3fe:	87 d0       	rcall	.+270    	; 0x50e <__fixunssfsi>
 400:	86 2f       	mov	r24, r22
 402:	f5 de       	rcall	.-534    	; 0x1ee <uartSendc>
		//Send back data
//		uartSendc((uint16_t)RPM>>8);
//		uartSendc((uint8_t)RPM);
	}
	tick++;
 404:	80 91 2c 02 	lds	r24, 0x022C
 408:	8f 5f       	subi	r24, 0xFF	; 255
 40a:	80 93 2c 02 	sts	0x022C, r24
}
 40e:	ff 91       	pop	r31
 410:	ef 91       	pop	r30
 412:	bf 91       	pop	r27
 414:	af 91       	pop	r26
 416:	9f 91       	pop	r25
 418:	8f 91       	pop	r24
 41a:	7f 91       	pop	r23
 41c:	6f 91       	pop	r22
 41e:	5f 91       	pop	r21
 420:	4f 91       	pop	r20
 422:	3f 91       	pop	r19
 424:	2f 91       	pop	r18
 426:	0f 90       	pop	r0
 428:	0b be       	out	0x3b, r0	; 59
 42a:	0f 90       	pop	r0
 42c:	0f be       	out	0x3f, r0	; 63
 42e:	0f 90       	pop	r0
 430:	1f 90       	pop	r1
 432:	18 95       	reti

00000434 <__vector_5>:

ISR(INT4_vect){
 434:	1f 92       	push	r1
 436:	0f 92       	push	r0
 438:	0f b6       	in	r0, 0x3f	; 63
 43a:	0f 92       	push	r0
 43c:	11 24       	eor	r1, r1
	//Optical encoder feedback from Launching motor
	//Input pin is Digital 2
//	rotation++;
}
 43e:	0f 90       	pop	r0
 440:	0f be       	out	0x3f, r0	; 63
 442:	0f 90       	pop	r0
 444:	1f 90       	pop	r1
 446:	18 95       	reti

00000448 <__vector_6>:
ISR(INT5_vect){
 448:	1f 92       	push	r1
 44a:	0f 92       	push	r0
 44c:	0f b6       	in	r0, 0x3f	; 63
 44e:	0f 92       	push	r0
 450:	11 24       	eor	r1, r1
 452:	8f 93       	push	r24
 454:	9f 93       	push	r25
	//Forward limit switch - stop the motor from moving.
	//Switch should be attached to ground and Digital 3
	OCR3A = 1171; 
 456:	83 e9       	ldi	r24, 0x93	; 147
 458:	94 e0       	ldi	r25, 0x04	; 4
 45a:	90 93 99 00 	sts	0x0099, r25
 45e:	80 93 98 00 	sts	0x0098, r24
//	uartSendc(0xff);
}
 462:	9f 91       	pop	r25
 464:	8f 91       	pop	r24
 466:	0f 90       	pop	r0
 468:	0f be       	out	0x3f, r0	; 63
 46a:	0f 90       	pop	r0
 46c:	1f 90       	pop	r1
 46e:	18 95       	reti

00000470 <__vector_3>:
ISR(INT2_vect){
 470:	1f 92       	push	r1
 472:	0f 92       	push	r0
 474:	0f b6       	in	r0, 0x3f	; 63
 476:	0f 92       	push	r0
 478:	11 24       	eor	r1, r1
 47a:	2f 93       	push	r18
 47c:	8f 93       	push	r24
 47e:	9f 93       	push	r25
	//Rear limit switch - reverses direction of motor.
	//Should be attached to ground and Digital 19.
	OCR3A = 1171;
 480:	83 e9       	ldi	r24, 0x93	; 147
 482:	94 e0       	ldi	r25, 0x04	; 4
 484:	90 93 99 00 	sts	0x0099, r25
 488:	80 93 98 00 	sts	0x0098, r24
 48c:	2f ef       	ldi	r18, 0xFF	; 255
 48e:	89 ef       	ldi	r24, 0xF9	; 249
 490:	90 e0       	ldi	r25, 0x00	; 0
 492:	21 50       	subi	r18, 0x01	; 1
 494:	80 40       	sbci	r24, 0x00	; 0
 496:	90 40       	sbci	r25, 0x00	; 0
 498:	e1 f7       	brne	.-8      	; 0x492 <__vector_3+0x22>
 49a:	00 c0       	rjmp	.+0      	; 0x49c <__vector_3+0x2c>
 49c:	00 00       	nop
//	uartSendc(0x0f);
	_delay_ms(20);
	OCR3A = 1157;
 49e:	85 e8       	ldi	r24, 0x85	; 133
 4a0:	94 e0       	ldi	r25, 0x04	; 4
 4a2:	90 93 99 00 	sts	0x0099, r25
 4a6:	80 93 98 00 	sts	0x0098, r24
}
 4aa:	9f 91       	pop	r25
 4ac:	8f 91       	pop	r24
 4ae:	2f 91       	pop	r18
 4b0:	0f 90       	pop	r0
 4b2:	0f be       	out	0x3f, r0	; 63
 4b4:	0f 90       	pop	r0
 4b6:	1f 90       	pop	r1
 4b8:	18 95       	reti

000004ba <__vector_25>:

ISR(USART0_RX_vect){
 4ba:	1f 92       	push	r1
 4bc:	0f 92       	push	r0
 4be:	0f b6       	in	r0, 0x3f	; 63
 4c0:	0f 92       	push	r0
 4c2:	11 24       	eor	r1, r1
 4c4:	0b b6       	in	r0, 0x3b	; 59
 4c6:	0f 92       	push	r0
 4c8:	8f 93       	push	r24
 4ca:	ef 93       	push	r30
 4cc:	ff 93       	push	r31
	uartData[i] = UDR0;
 4ce:	e0 91 01 02 	lds	r30, 0x0201
 4d2:	f0 e0       	ldi	r31, 0x00	; 0
 4d4:	80 91 c6 00 	lds	r24, 0x00C6
 4d8:	ee 5f       	subi	r30, 0xFE	; 254
 4da:	fd 4f       	sbci	r31, 0xFD	; 253
 4dc:	80 83       	st	Z, r24
	i++;
 4de:	80 91 01 02 	lds	r24, 0x0201
 4e2:	8f 5f       	subi	r24, 0xFF	; 255
 4e4:	80 93 01 02 	sts	0x0201, r24
	if(i >= 3){
 4e8:	80 91 01 02 	lds	r24, 0x0201
 4ec:	83 30       	cpi	r24, 0x03	; 3
 4ee:	28 f0       	brcs	.+10     	; 0x4fa <__vector_25+0x40>
		i=0;
 4f0:	10 92 01 02 	sts	0x0201, r1
		uartPacketReady = true;
 4f4:	81 e0       	ldi	r24, 0x01	; 1
 4f6:	80 93 00 02 	sts	0x0200, r24
	}
}
 4fa:	ff 91       	pop	r31
 4fc:	ef 91       	pop	r30
 4fe:	8f 91       	pop	r24
 500:	0f 90       	pop	r0
 502:	0b be       	out	0x3b, r0	; 59
 504:	0f 90       	pop	r0
 506:	0f be       	out	0x3f, r0	; 63
 508:	0f 90       	pop	r0
 50a:	1f 90       	pop	r1
 50c:	18 95       	reti

0000050e <__fixunssfsi>:
 50e:	98 d0       	rcall	.+304    	; 0x640 <__fp_splitA>
 510:	88 f0       	brcs	.+34     	; 0x534 <__fixunssfsi+0x26>
 512:	9f 57       	subi	r25, 0x7F	; 127
 514:	90 f0       	brcs	.+36     	; 0x53a <__fixunssfsi+0x2c>
 516:	b9 2f       	mov	r27, r25
 518:	99 27       	eor	r25, r25
 51a:	b7 51       	subi	r27, 0x17	; 23
 51c:	a0 f0       	brcs	.+40     	; 0x546 <__fixunssfsi+0x38>
 51e:	d1 f0       	breq	.+52     	; 0x554 <__fixunssfsi+0x46>
 520:	66 0f       	add	r22, r22
 522:	77 1f       	adc	r23, r23
 524:	88 1f       	adc	r24, r24
 526:	99 1f       	adc	r25, r25
 528:	1a f0       	brmi	.+6      	; 0x530 <__fixunssfsi+0x22>
 52a:	ba 95       	dec	r27
 52c:	c9 f7       	brne	.-14     	; 0x520 <__fixunssfsi+0x12>
 52e:	12 c0       	rjmp	.+36     	; 0x554 <__fixunssfsi+0x46>
 530:	b1 30       	cpi	r27, 0x01	; 1
 532:	81 f0       	breq	.+32     	; 0x554 <__fixunssfsi+0x46>
 534:	9f d0       	rcall	.+318    	; 0x674 <__fp_zero>
 536:	b1 e0       	ldi	r27, 0x01	; 1
 538:	08 95       	ret
 53a:	9c c0       	rjmp	.+312    	; 0x674 <__fp_zero>
 53c:	67 2f       	mov	r22, r23
 53e:	78 2f       	mov	r23, r24
 540:	88 27       	eor	r24, r24
 542:	b8 5f       	subi	r27, 0xF8	; 248
 544:	39 f0       	breq	.+14     	; 0x554 <__fixunssfsi+0x46>
 546:	b9 3f       	cpi	r27, 0xF9	; 249
 548:	cc f3       	brlt	.-14     	; 0x53c <__fixunssfsi+0x2e>
 54a:	86 95       	lsr	r24
 54c:	77 95       	ror	r23
 54e:	67 95       	ror	r22
 550:	b3 95       	inc	r27
 552:	d9 f7       	brne	.-10     	; 0x54a <__fixunssfsi+0x3c>
 554:	3e f4       	brtc	.+14     	; 0x564 <__fixunssfsi+0x56>
 556:	90 95       	com	r25
 558:	80 95       	com	r24
 55a:	70 95       	com	r23
 55c:	61 95       	neg	r22
 55e:	7f 4f       	sbci	r23, 0xFF	; 255
 560:	8f 4f       	sbci	r24, 0xFF	; 255
 562:	9f 4f       	sbci	r25, 0xFF	; 255
 564:	08 95       	ret

00000566 <__floatunsisf>:
 566:	e8 94       	clt
 568:	09 c0       	rjmp	.+18     	; 0x57c <__floatsisf+0x12>

0000056a <__floatsisf>:
 56a:	97 fb       	bst	r25, 7
 56c:	3e f4       	brtc	.+14     	; 0x57c <__floatsisf+0x12>
 56e:	90 95       	com	r25
 570:	80 95       	com	r24
 572:	70 95       	com	r23
 574:	61 95       	neg	r22
 576:	7f 4f       	sbci	r23, 0xFF	; 255
 578:	8f 4f       	sbci	r24, 0xFF	; 255
 57a:	9f 4f       	sbci	r25, 0xFF	; 255
 57c:	99 23       	and	r25, r25
 57e:	a9 f0       	breq	.+42     	; 0x5aa <__floatsisf+0x40>
 580:	f9 2f       	mov	r31, r25
 582:	96 e9       	ldi	r25, 0x96	; 150
 584:	bb 27       	eor	r27, r27
 586:	93 95       	inc	r25
 588:	f6 95       	lsr	r31
 58a:	87 95       	ror	r24
 58c:	77 95       	ror	r23
 58e:	67 95       	ror	r22
 590:	b7 95       	ror	r27
 592:	f1 11       	cpse	r31, r1
 594:	f8 cf       	rjmp	.-16     	; 0x586 <__floatsisf+0x1c>
 596:	fa f4       	brpl	.+62     	; 0x5d6 <__floatsisf+0x6c>
 598:	bb 0f       	add	r27, r27
 59a:	11 f4       	brne	.+4      	; 0x5a0 <__floatsisf+0x36>
 59c:	60 ff       	sbrs	r22, 0
 59e:	1b c0       	rjmp	.+54     	; 0x5d6 <__floatsisf+0x6c>
 5a0:	6f 5f       	subi	r22, 0xFF	; 255
 5a2:	7f 4f       	sbci	r23, 0xFF	; 255
 5a4:	8f 4f       	sbci	r24, 0xFF	; 255
 5a6:	9f 4f       	sbci	r25, 0xFF	; 255
 5a8:	16 c0       	rjmp	.+44     	; 0x5d6 <__floatsisf+0x6c>
 5aa:	88 23       	and	r24, r24
 5ac:	11 f0       	breq	.+4      	; 0x5b2 <__floatsisf+0x48>
 5ae:	96 e9       	ldi	r25, 0x96	; 150
 5b0:	11 c0       	rjmp	.+34     	; 0x5d4 <__floatsisf+0x6a>
 5b2:	77 23       	and	r23, r23
 5b4:	21 f0       	breq	.+8      	; 0x5be <__floatsisf+0x54>
 5b6:	9e e8       	ldi	r25, 0x8E	; 142
 5b8:	87 2f       	mov	r24, r23
 5ba:	76 2f       	mov	r23, r22
 5bc:	05 c0       	rjmp	.+10     	; 0x5c8 <__floatsisf+0x5e>
 5be:	66 23       	and	r22, r22
 5c0:	71 f0       	breq	.+28     	; 0x5de <__floatsisf+0x74>
 5c2:	96 e8       	ldi	r25, 0x86	; 134
 5c4:	86 2f       	mov	r24, r22
 5c6:	70 e0       	ldi	r23, 0x00	; 0
 5c8:	60 e0       	ldi	r22, 0x00	; 0
 5ca:	2a f0       	brmi	.+10     	; 0x5d6 <__floatsisf+0x6c>
 5cc:	9a 95       	dec	r25
 5ce:	66 0f       	add	r22, r22
 5d0:	77 1f       	adc	r23, r23
 5d2:	88 1f       	adc	r24, r24
 5d4:	da f7       	brpl	.-10     	; 0x5cc <__floatsisf+0x62>
 5d6:	88 0f       	add	r24, r24
 5d8:	96 95       	lsr	r25
 5da:	87 95       	ror	r24
 5dc:	97 f9       	bld	r25, 7
 5de:	08 95       	ret

000005e0 <__fp_inf>:
 5e0:	97 f9       	bld	r25, 7
 5e2:	9f 67       	ori	r25, 0x7F	; 127
 5e4:	80 e8       	ldi	r24, 0x80	; 128
 5e6:	70 e0       	ldi	r23, 0x00	; 0
 5e8:	60 e0       	ldi	r22, 0x00	; 0
 5ea:	08 95       	ret

000005ec <__fp_nan>:
 5ec:	9f ef       	ldi	r25, 0xFF	; 255
 5ee:	80 ec       	ldi	r24, 0xC0	; 192
 5f0:	08 95       	ret

000005f2 <__fp_pscA>:
 5f2:	00 24       	eor	r0, r0
 5f4:	0a 94       	dec	r0
 5f6:	16 16       	cp	r1, r22
 5f8:	17 06       	cpc	r1, r23
 5fa:	18 06       	cpc	r1, r24
 5fc:	09 06       	cpc	r0, r25
 5fe:	08 95       	ret

00000600 <__fp_pscB>:
 600:	00 24       	eor	r0, r0
 602:	0a 94       	dec	r0
 604:	12 16       	cp	r1, r18
 606:	13 06       	cpc	r1, r19
 608:	14 06       	cpc	r1, r20
 60a:	05 06       	cpc	r0, r21
 60c:	08 95       	ret

0000060e <__fp_round>:
 60e:	09 2e       	mov	r0, r25
 610:	03 94       	inc	r0
 612:	00 0c       	add	r0, r0
 614:	11 f4       	brne	.+4      	; 0x61a <__fp_round+0xc>
 616:	88 23       	and	r24, r24
 618:	52 f0       	brmi	.+20     	; 0x62e <__fp_round+0x20>
 61a:	bb 0f       	add	r27, r27
 61c:	40 f4       	brcc	.+16     	; 0x62e <__fp_round+0x20>
 61e:	bf 2b       	or	r27, r31
 620:	11 f4       	brne	.+4      	; 0x626 <__fp_round+0x18>
 622:	60 ff       	sbrs	r22, 0
 624:	04 c0       	rjmp	.+8      	; 0x62e <__fp_round+0x20>
 626:	6f 5f       	subi	r22, 0xFF	; 255
 628:	7f 4f       	sbci	r23, 0xFF	; 255
 62a:	8f 4f       	sbci	r24, 0xFF	; 255
 62c:	9f 4f       	sbci	r25, 0xFF	; 255
 62e:	08 95       	ret

00000630 <__fp_split3>:
 630:	57 fd       	sbrc	r21, 7
 632:	90 58       	subi	r25, 0x80	; 128
 634:	44 0f       	add	r20, r20
 636:	55 1f       	adc	r21, r21
 638:	59 f0       	breq	.+22     	; 0x650 <__fp_splitA+0x10>
 63a:	5f 3f       	cpi	r21, 0xFF	; 255
 63c:	71 f0       	breq	.+28     	; 0x65a <__fp_splitA+0x1a>
 63e:	47 95       	ror	r20

00000640 <__fp_splitA>:
 640:	88 0f       	add	r24, r24
 642:	97 fb       	bst	r25, 7
 644:	99 1f       	adc	r25, r25
 646:	61 f0       	breq	.+24     	; 0x660 <__fp_splitA+0x20>
 648:	9f 3f       	cpi	r25, 0xFF	; 255
 64a:	79 f0       	breq	.+30     	; 0x66a <__fp_splitA+0x2a>
 64c:	87 95       	ror	r24
 64e:	08 95       	ret
 650:	12 16       	cp	r1, r18
 652:	13 06       	cpc	r1, r19
 654:	14 06       	cpc	r1, r20
 656:	55 1f       	adc	r21, r21
 658:	f2 cf       	rjmp	.-28     	; 0x63e <__fp_split3+0xe>
 65a:	46 95       	lsr	r20
 65c:	f1 df       	rcall	.-30     	; 0x640 <__fp_splitA>
 65e:	08 c0       	rjmp	.+16     	; 0x670 <__fp_splitA+0x30>
 660:	16 16       	cp	r1, r22
 662:	17 06       	cpc	r1, r23
 664:	18 06       	cpc	r1, r24
 666:	99 1f       	adc	r25, r25
 668:	f1 cf       	rjmp	.-30     	; 0x64c <__fp_splitA+0xc>
 66a:	86 95       	lsr	r24
 66c:	71 05       	cpc	r23, r1
 66e:	61 05       	cpc	r22, r1
 670:	08 94       	sec
 672:	08 95       	ret

00000674 <__fp_zero>:
 674:	e8 94       	clt

00000676 <__fp_szero>:
 676:	bb 27       	eor	r27, r27
 678:	66 27       	eor	r22, r22
 67a:	77 27       	eor	r23, r23
 67c:	cb 01       	movw	r24, r22
 67e:	97 f9       	bld	r25, 7
 680:	08 95       	ret

00000682 <__mulsf3>:
 682:	0b d0       	rcall	.+22     	; 0x69a <__mulsf3x>
 684:	c4 cf       	rjmp	.-120    	; 0x60e <__fp_round>
 686:	b5 df       	rcall	.-150    	; 0x5f2 <__fp_pscA>
 688:	28 f0       	brcs	.+10     	; 0x694 <__mulsf3+0x12>
 68a:	ba df       	rcall	.-140    	; 0x600 <__fp_pscB>
 68c:	18 f0       	brcs	.+6      	; 0x694 <__mulsf3+0x12>
 68e:	95 23       	and	r25, r21
 690:	09 f0       	breq	.+2      	; 0x694 <__mulsf3+0x12>
 692:	a6 cf       	rjmp	.-180    	; 0x5e0 <__fp_inf>
 694:	ab cf       	rjmp	.-170    	; 0x5ec <__fp_nan>
 696:	11 24       	eor	r1, r1
 698:	ee cf       	rjmp	.-36     	; 0x676 <__fp_szero>

0000069a <__mulsf3x>:
 69a:	ca df       	rcall	.-108    	; 0x630 <__fp_split3>
 69c:	a0 f3       	brcs	.-24     	; 0x686 <__mulsf3+0x4>

0000069e <__mulsf3_pse>:
 69e:	95 9f       	mul	r25, r21
 6a0:	d1 f3       	breq	.-12     	; 0x696 <__mulsf3+0x14>
 6a2:	95 0f       	add	r25, r21
 6a4:	50 e0       	ldi	r21, 0x00	; 0
 6a6:	55 1f       	adc	r21, r21
 6a8:	62 9f       	mul	r22, r18
 6aa:	f0 01       	movw	r30, r0
 6ac:	72 9f       	mul	r23, r18
 6ae:	bb 27       	eor	r27, r27
 6b0:	f0 0d       	add	r31, r0
 6b2:	b1 1d       	adc	r27, r1
 6b4:	63 9f       	mul	r22, r19
 6b6:	aa 27       	eor	r26, r26
 6b8:	f0 0d       	add	r31, r0
 6ba:	b1 1d       	adc	r27, r1
 6bc:	aa 1f       	adc	r26, r26
 6be:	64 9f       	mul	r22, r20
 6c0:	66 27       	eor	r22, r22
 6c2:	b0 0d       	add	r27, r0
 6c4:	a1 1d       	adc	r26, r1
 6c6:	66 1f       	adc	r22, r22
 6c8:	82 9f       	mul	r24, r18
 6ca:	22 27       	eor	r18, r18
 6cc:	b0 0d       	add	r27, r0
 6ce:	a1 1d       	adc	r26, r1
 6d0:	62 1f       	adc	r22, r18
 6d2:	73 9f       	mul	r23, r19
 6d4:	b0 0d       	add	r27, r0
 6d6:	a1 1d       	adc	r26, r1
 6d8:	62 1f       	adc	r22, r18
 6da:	83 9f       	mul	r24, r19
 6dc:	a0 0d       	add	r26, r0
 6de:	61 1d       	adc	r22, r1
 6e0:	22 1f       	adc	r18, r18
 6e2:	74 9f       	mul	r23, r20
 6e4:	33 27       	eor	r19, r19
 6e6:	a0 0d       	add	r26, r0
 6e8:	61 1d       	adc	r22, r1
 6ea:	23 1f       	adc	r18, r19
 6ec:	84 9f       	mul	r24, r20
 6ee:	60 0d       	add	r22, r0
 6f0:	21 1d       	adc	r18, r1
 6f2:	82 2f       	mov	r24, r18
 6f4:	76 2f       	mov	r23, r22
 6f6:	6a 2f       	mov	r22, r26
 6f8:	11 24       	eor	r1, r1
 6fa:	9f 57       	subi	r25, 0x7F	; 127
 6fc:	50 40       	sbci	r21, 0x00	; 0
 6fe:	8a f0       	brmi	.+34     	; 0x722 <__mulsf3_pse+0x84>
 700:	e1 f0       	breq	.+56     	; 0x73a <__mulsf3_pse+0x9c>
 702:	88 23       	and	r24, r24
 704:	4a f0       	brmi	.+18     	; 0x718 <__mulsf3_pse+0x7a>
 706:	ee 0f       	add	r30, r30
 708:	ff 1f       	adc	r31, r31
 70a:	bb 1f       	adc	r27, r27
 70c:	66 1f       	adc	r22, r22
 70e:	77 1f       	adc	r23, r23
 710:	88 1f       	adc	r24, r24
 712:	91 50       	subi	r25, 0x01	; 1
 714:	50 40       	sbci	r21, 0x00	; 0
 716:	a9 f7       	brne	.-22     	; 0x702 <__mulsf3_pse+0x64>
 718:	9e 3f       	cpi	r25, 0xFE	; 254
 71a:	51 05       	cpc	r21, r1
 71c:	70 f0       	brcs	.+28     	; 0x73a <__mulsf3_pse+0x9c>
 71e:	60 cf       	rjmp	.-320    	; 0x5e0 <__fp_inf>
 720:	aa cf       	rjmp	.-172    	; 0x676 <__fp_szero>
 722:	5f 3f       	cpi	r21, 0xFF	; 255
 724:	ec f3       	brlt	.-6      	; 0x720 <__mulsf3_pse+0x82>
 726:	98 3e       	cpi	r25, 0xE8	; 232
 728:	dc f3       	brlt	.-10     	; 0x720 <__mulsf3_pse+0x82>
 72a:	86 95       	lsr	r24
 72c:	77 95       	ror	r23
 72e:	67 95       	ror	r22
 730:	b7 95       	ror	r27
 732:	f7 95       	ror	r31
 734:	e7 95       	ror	r30
 736:	9f 5f       	subi	r25, 0xFF	; 255
 738:	c1 f7       	brne	.-16     	; 0x72a <__mulsf3_pse+0x8c>
 73a:	fe 2b       	or	r31, r30
 73c:	88 0f       	add	r24, r24
 73e:	91 1d       	adc	r25, r1
 740:	96 95       	lsr	r25
 742:	87 95       	ror	r24
 744:	97 f9       	bld	r25, 7
 746:	08 95       	ret

00000748 <_exit>:
 748:	f8 94       	cli

0000074a <__stop_program>:
 74a:	ff cf       	rjmp	.-2      	; 0x74a <__stop_program>
