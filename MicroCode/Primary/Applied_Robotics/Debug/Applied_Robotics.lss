
Applied_Robotics.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800200  00000358  000003ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000358  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000049  0080020a  0080020a  000003f6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003f6  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000000c0  00000000  00000000  00000426  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000925  00000000  00000000  000004e6  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000037a  00000000  00000000  00000e0b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000006ee  00000000  00000000  00001185  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000340  00000000  00000000  00001874  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000042d  00000000  00000000  00001bb4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000a6f  00000000  00000000  00001fe1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000b0  00000000  00000000  00002a50  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	60 c1       	rjmp	.+704    	; 0x2d6 <__vector_5>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	e2 c0       	rjmp	.+452    	; 0x222 <__vector_23>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	4f c1       	rjmp	.+670    	; 0x304 <__vector_25>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e8 e5       	ldi	r30, 0x58	; 88
  fc:	f3 e0       	ldi	r31, 0x03	; 3
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	aa 30       	cpi	r26, 0x0A	; 10
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	aa e0       	ldi	r26, 0x0A	; 10
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a3 35       	cpi	r26, 0x53	; 83
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	46 d0       	rcall	.+140    	; 0x1ac <main>
 120:	19 c1       	rjmp	.+562    	; 0x354 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <uartInit>:
	PIDsetTunings(6,0.6,0.6);
	//Start controller
	PIDinitialize();
	//Set Setpoint to 0 RPM
	Setpoint = 0;
}
 124:	e1 ec       	ldi	r30, 0xC1	; 193
 126:	f0 e0       	ldi	r31, 0x00	; 0
 128:	80 81       	ld	r24, Z
 12a:	88 69       	ori	r24, 0x98	; 152
 12c:	80 83       	st	Z, r24
 12e:	a2 ec       	ldi	r26, 0xC2	; 194
 130:	b0 e0       	ldi	r27, 0x00	; 0
 132:	8c 91       	ld	r24, X
 134:	86 60       	ori	r24, 0x06	; 6
 136:	8c 93       	st	X, r24
 138:	80 81       	ld	r24, Z
 13a:	80 68       	ori	r24, 0x80	; 128
 13c:	80 83       	st	Z, r24
 13e:	10 92 c5 00 	sts	0x00C5, r1
 142:	87 e6       	ldi	r24, 0x67	; 103
 144:	80 93 c4 00 	sts	0x00C4, r24
 148:	08 95       	ret

0000014a <timer0Init>:
 14a:	ee e6       	ldi	r30, 0x6E	; 110
 14c:	f0 e0       	ldi	r31, 0x00	; 0
 14e:	80 81       	ld	r24, Z
 150:	81 60       	ori	r24, 0x01	; 1
 152:	80 83       	st	Z, r24
 154:	85 b5       	in	r24, 0x25	; 37
 156:	85 60       	ori	r24, 0x05	; 5
 158:	85 bd       	out	0x25, r24	; 37
 15a:	16 bc       	out	0x26, r1	; 38
 15c:	08 95       	ret

0000015e <timer2Init>:
 15e:	e0 eb       	ldi	r30, 0xB0	; 176
 160:	f0 e0       	ldi	r31, 0x00	; 0
 162:	80 81       	ld	r24, Z
 164:	83 68       	ori	r24, 0x83	; 131
 166:	80 83       	st	Z, r24
 168:	e1 eb       	ldi	r30, 0xB1	; 177
 16a:	f0 e0       	ldi	r31, 0x00	; 0
 16c:	80 81       	ld	r24, Z
 16e:	81 60       	ori	r24, 0x01	; 1
 170:	80 83       	st	Z, r24
 172:	10 92 b3 00 	sts	0x00B3, r1
 176:	24 9a       	sbi	0x04, 4	; 4
 178:	08 95       	ret

0000017a <externalInterrupts>:
 17a:	ea e6       	ldi	r30, 0x6A	; 106
 17c:	f0 e0       	ldi	r31, 0x00	; 0
 17e:	80 81       	ld	r24, Z
 180:	82 60       	ori	r24, 0x02	; 2
 182:	80 83       	st	Z, r24
 184:	ec 9a       	sbi	0x1d, 4	; 29
 186:	08 95       	ret

00000188 <uartSendc>:
 188:	90 91 c0 00 	lds	r25, 0x00C0
 18c:	95 ff       	sbrs	r25, 5
 18e:	fc cf       	rjmp	.-8      	; 0x188 <uartSendc>
 190:	80 93 c6 00 	sts	0x00C6, r24
 194:	08 95       	ret

00000196 <uartSends>:
 196:	cf 93       	push	r28
 198:	df 93       	push	r29
 19a:	ec 01       	movw	r28, r24
 19c:	89 91       	ld	r24, Y+
 19e:	88 23       	and	r24, r24
 1a0:	11 f0       	breq	.+4      	; 0x1a6 <uartSends+0x10>
 1a2:	f2 df       	rcall	.-28     	; 0x188 <uartSendc>
 1a4:	fb cf       	rjmp	.-10     	; 0x19c <uartSends+0x6>
 1a6:	df 91       	pop	r29
 1a8:	cf 91       	pop	r28
 1aa:	08 95       	ret

000001ac <main>:

int main(void)
{
	uartInit();
 1ac:	bb df       	rcall	.-138    	; 0x124 <uartInit>
	timer0Init();
 1ae:	cd df       	rcall	.-102    	; 0x14a <timer0Init>
	timer2Init();
 1b0:	d6 df       	rcall	.-84     	; 0x15e <timer2Init>
	externalInterrupts();
 1b2:	e3 df       	rcall	.-58     	; 0x17a <externalInterrupts>
	DDRB |= (1<<PB4) | (1<<PB5) | (1<<PB7);
 1b4:	84 b1       	in	r24, 0x04	; 4
 1b6:	80 6b       	ori	r24, 0xB0	; 176
 1b8:	84 b9       	out	0x04, r24	; 4
	//set PC0-3 to output for stepper control
	//PC0-PC3 are used for stepper control
	//PC0=37,   PC1=36,   PC2=35,   PC3=34
	DDRC |= (1<<PC0) | (1<<PC1) | (1<<PC2) | (1<<PC3);
 1ba:	87 b1       	in	r24, 0x07	; 7
 1bc:	8f 60       	ori	r24, 0x0F	; 15
 1be:	87 b9       	out	0x07, r24	; 7
		
	sei();
 1c0:	78 94       	sei
	
    while(1)
	    {
				if(i >= 2){
 1c2:	80 91 0b 02 	lds	r24, 0x020B
 1c6:	82 30       	cpi	r24, 0x02	; 2
 1c8:	10 f1       	brcs	.+68     	; 0x20e <main+0x62>
					uartSendc(uartData[0]);
 1ca:	80 91 0c 02 	lds	r24, 0x020C
 1ce:	dc df       	rcall	.-72     	; 0x188 <uartSendc>
					uartSendc(uartData[1]);
 1d0:	80 91 0d 02 	lds	r24, 0x020D
 1d4:	d9 df       	rcall	.-78     	; 0x188 <uartSendc>
					if(uartData[0] == 1){
 1d6:	80 91 0c 02 	lds	r24, 0x020C
 1da:	81 30       	cpi	r24, 0x01	; 1
 1dc:	29 f4       	brne	.+10     	; 0x1e8 <main+0x3c>
						PORTB |= (1<<PB5);
 1de:	2d 9a       	sbi	0x05, 5	; 5
						OCR2A = uartData[1];
 1e0:	80 91 0d 02 	lds	r24, 0x020D
 1e4:	80 93 b3 00 	sts	0x00B3, r24
					}				
					if(uartData[0] == 2){
 1e8:	80 91 0c 02 	lds	r24, 0x020C
 1ec:	82 30       	cpi	r24, 0x02	; 2
 1ee:	29 f4       	brne	.+10     	; 0x1fa <main+0x4e>
//						rampMotorSpeed(uartData[1]);
						OCR2A = uartData[1];
 1f0:	80 91 0d 02 	lds	r24, 0x020D
 1f4:	80 93 b3 00 	sts	0x00B3, r24
						PORTB &= ~(1<<PB5);
 1f8:	2d 98       	cbi	0x05, 5	; 5
					}
					if(uartData[0] == 3){
 1fa:	80 91 0c 02 	lds	r24, 0x020C
 1fe:	83 30       	cpi	r24, 0x03	; 3
 200:	21 f4       	brne	.+8      	; 0x20a <main+0x5e>
						uartSends("To IDCUP\n");
 202:	80 e0       	ldi	r24, 0x00	; 0
 204:	92 e0       	ldi	r25, 0x02	; 2
 206:	c7 df       	rcall	.-114    	; 0x196 <uartSends>
						PORTB &= ~(1<<PB7);
 208:	2f 98       	cbi	0x05, 7	; 5
					} 
					i = 0;
 20a:	10 92 0b 02 	sts	0x020B, r1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 20e:	2f ef       	ldi	r18, 0xFF	; 255
 210:	84 e3       	ldi	r24, 0x34	; 52
 212:	9c e0       	ldi	r25, 0x0C	; 12
 214:	21 50       	subi	r18, 0x01	; 1
 216:	80 40       	sbci	r24, 0x00	; 0
 218:	90 40       	sbci	r25, 0x00	; 0
 21a:	e1 f7       	brne	.-8      	; 0x214 <main+0x68>
 21c:	00 c0       	rjmp	.+0      	; 0x21e <main+0x72>
 21e:	00 00       	nop
 220:	d0 cf       	rjmp	.-96     	; 0x1c2 <main+0x16>

00000222 <__vector_23>:
				_delay_ms(250);
		}
}


ISR(TIMER0_OVF_vect){
 222:	1f 92       	push	r1
 224:	0f 92       	push	r0
 226:	0f b6       	in	r0, 0x3f	; 63
 228:	0f 92       	push	r0
 22a:	11 24       	eor	r1, r1
 22c:	0b b6       	in	r0, 0x3b	; 59
 22e:	0f 92       	push	r0
 230:	2f 93       	push	r18
 232:	3f 93       	push	r19
 234:	4f 93       	push	r20
 236:	5f 93       	push	r21
 238:	6f 93       	push	r22
 23a:	7f 93       	push	r23
 23c:	8f 93       	push	r24
 23e:	9f 93       	push	r25
 240:	af 93       	push	r26
 242:	bf 93       	push	r27
 244:	ef 93       	push	r30
 246:	ff 93       	push	r31
	//60 ticks is a second. 6 is a .1 sec
	//only send speed once a second.
	if(tick == 60){
 248:	80 91 36 02 	lds	r24, 0x0236
 24c:	8c 33       	cpi	r24, 0x3C	; 60
 24e:	19 f4       	brne	.+6      	; 0x256 <__vector_23+0x34>
		uartSendc(rotation);
 250:	80 91 13 02 	lds	r24, 0x0213
 254:	99 df       	rcall	.-206    	; 0x188 <uartSendc>
	}
	//12 ticks is 200ms. This gives 300 RPM minimum or 5 RPS
	if(tick == 12){
 256:	80 91 36 02 	lds	r24, 0x0236
 25a:	8c 30       	cpi	r24, 0x0C	; 12
 25c:	21 f5       	brne	.+72     	; 0x2a6 <__vector_23+0x84>
		tick = 0;
 25e:	10 92 36 02 	sts	0x0236, r1
		//rotations/200ms * 1000ms/1s * 60s/min
		RPM = rotation * 300; 
 262:	80 91 13 02 	lds	r24, 0x0213
 266:	90 91 14 02 	lds	r25, 0x0214
 26a:	4c e2       	ldi	r20, 0x2C	; 44
 26c:	51 e0       	ldi	r21, 0x01	; 1
 26e:	84 9f       	mul	r24, r20
 270:	90 01       	movw	r18, r0
 272:	85 9f       	mul	r24, r21
 274:	30 0d       	add	r19, r0
 276:	94 9f       	mul	r25, r20
 278:	30 0d       	add	r19, r0
 27a:	11 24       	eor	r1, r1
 27c:	30 93 2d 02 	sts	0x022D, r19
 280:	20 93 2c 02 	sts	0x022C, r18
		lastRotation = rotation;
 284:	a0 e0       	ldi	r26, 0x00	; 0
 286:	b0 e0       	ldi	r27, 0x00	; 0
 288:	80 93 0f 02 	sts	0x020F, r24
 28c:	90 93 10 02 	sts	0x0210, r25
 290:	a0 93 11 02 	sts	0x0211, r26
 294:	b0 93 12 02 	sts	0x0212, r27
//			PIDinput = (rotation);
//			PIDcompute();
//		}
		//its been 1s check the counter
//		uartSendc((uint8_t)PIDoutput);
		rotation = 0;
 298:	10 92 14 02 	sts	0x0214, r1
 29c:	10 92 13 02 	sts	0x0213, r1
		rotationUpdated = 1;
 2a0:	81 e0       	ldi	r24, 0x01	; 1
 2a2:	80 93 0e 02 	sts	0x020E, r24
		//(Rotation/50ms) * (1000ms/sec) * (60sec/min) = RPM - not correct anymore
		PIDinput = (rotation);
		PIDcompute();
	}
	*/
	tick++;
 2a6:	80 91 36 02 	lds	r24, 0x0236
 2aa:	8f 5f       	subi	r24, 0xFF	; 255
 2ac:	80 93 36 02 	sts	0x0236, r24
}
 2b0:	ff 91       	pop	r31
 2b2:	ef 91       	pop	r30
 2b4:	bf 91       	pop	r27
 2b6:	af 91       	pop	r26
 2b8:	9f 91       	pop	r25
 2ba:	8f 91       	pop	r24
 2bc:	7f 91       	pop	r23
 2be:	6f 91       	pop	r22
 2c0:	5f 91       	pop	r21
 2c2:	4f 91       	pop	r20
 2c4:	3f 91       	pop	r19
 2c6:	2f 91       	pop	r18
 2c8:	0f 90       	pop	r0
 2ca:	0b be       	out	0x3b, r0	; 59
 2cc:	0f 90       	pop	r0
 2ce:	0f be       	out	0x3f, r0	; 63
 2d0:	0f 90       	pop	r0
 2d2:	1f 90       	pop	r1
 2d4:	18 95       	reti

000002d6 <__vector_5>:

ISR(INT4_vect){
 2d6:	1f 92       	push	r1
 2d8:	0f 92       	push	r0
 2da:	0f b6       	in	r0, 0x3f	; 63
 2dc:	0f 92       	push	r0
 2de:	11 24       	eor	r1, r1
 2e0:	8f 93       	push	r24
 2e2:	9f 93       	push	r25
	rotation++;
 2e4:	80 91 13 02 	lds	r24, 0x0213
 2e8:	90 91 14 02 	lds	r25, 0x0214
 2ec:	01 96       	adiw	r24, 0x01	; 1
 2ee:	90 93 14 02 	sts	0x0214, r25
 2f2:	80 93 13 02 	sts	0x0213, r24
//	PORTB ^= (1<<PB7);
//	_delay_ms(1);
}
 2f6:	9f 91       	pop	r25
 2f8:	8f 91       	pop	r24
 2fa:	0f 90       	pop	r0
 2fc:	0f be       	out	0x3f, r0	; 63
 2fe:	0f 90       	pop	r0
 300:	1f 90       	pop	r1
 302:	18 95       	reti

00000304 <__vector_25>:

ISR(USART0_RX_vect){
 304:	1f 92       	push	r1
 306:	0f 92       	push	r0
 308:	0f b6       	in	r0, 0x3f	; 63
 30a:	0f 92       	push	r0
 30c:	11 24       	eor	r1, r1
 30e:	0b b6       	in	r0, 0x3b	; 59
 310:	0f 92       	push	r0
 312:	8f 93       	push	r24
 314:	ef 93       	push	r30
 316:	ff 93       	push	r31
//	receivedByte = UDR0;
//	UDR0 = receivedByte;
	uartData[i] = UDR0;
 318:	e0 91 0b 02 	lds	r30, 0x020B
 31c:	f0 e0       	ldi	r31, 0x00	; 0
 31e:	80 91 c6 00 	lds	r24, 0x00C6
 322:	e4 5f       	subi	r30, 0xF4	; 244
 324:	fd 4f       	sbci	r31, 0xFD	; 253
 326:	80 83       	st	Z, r24
//	uartSendc(255);
	i++;
 328:	80 91 0b 02 	lds	r24, 0x020B
 32c:	8f 5f       	subi	r24, 0xFF	; 255
 32e:	80 93 0b 02 	sts	0x020B, r24
	if(i >= 2){
 332:	80 91 0b 02 	lds	r24, 0x020B
 336:	82 30       	cpi	r24, 0x02	; 2
 338:	18 f0       	brcs	.+6      	; 0x340 <__vector_25+0x3c>
		uartPacketReady = true;
 33a:	81 e0       	ldi	r24, 0x01	; 1
 33c:	80 93 0a 02 	sts	0x020A, r24
	}
//	OCR2A = UDR0;
}
 340:	ff 91       	pop	r31
 342:	ef 91       	pop	r30
 344:	8f 91       	pop	r24
 346:	0f 90       	pop	r0
 348:	0b be       	out	0x3b, r0	; 59
 34a:	0f 90       	pop	r0
 34c:	0f be       	out	0x3f, r0	; 63
 34e:	0f 90       	pop	r0
 350:	1f 90       	pop	r1
 352:	18 95       	reti

00000354 <_exit>:
 354:	f8 94       	cli

00000356 <__stop_program>:
 356:	ff cf       	rjmp	.-2      	; 0x356 <__stop_program>
