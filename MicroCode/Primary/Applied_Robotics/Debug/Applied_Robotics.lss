
Applied_Robotics.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000004fc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          0000004b  00800200  00800200  00000570  2**0
                  ALLOC
  2 .comment      00000030  00000000  00000000  00000570  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 000000d8  00000000  00000000  000005a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000ab9  00000000  00000000  00000678  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000037d  00000000  00000000  00001131  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000007ef  00000000  00000000  000014ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  0000038c  00000000  00000000  00001ca0  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000045f  00000000  00000000  0000202c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000b25  00000000  00000000  0000248b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000000c8  00000000  00000000  00002fb0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	3e c2       	rjmp	.+1148   	; 0x48a <__vector_3>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	17 c2       	rjmp	.+1070   	; 0x444 <__vector_5>
  16:	00 00       	nop
  18:	2c c2       	rjmp	.+1112   	; 0x472 <__vector_6>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	99 c1       	rjmp	.+818    	; 0x390 <__vector_23>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	21 c2       	rjmp	.+1090   	; 0x4a8 <__vector_25>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ec ef       	ldi	r30, 0xFC	; 252
  fc:	f4 e0       	ldi	r31, 0x04	; 4
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a0 30       	cpi	r26, 0x00	; 0
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a0 e0       	ldi	r26, 0x00	; 0
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	ab 34       	cpi	r26, 0x4B	; 75
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	ef d0       	rcall	.+478    	; 0x2fe <main>
 120:	eb c1       	rjmp	.+982    	; 0x4f8 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <uartInit>:
	PIDsetTunings(6,0.6,0.6);
	//Start controller
	PIDinitialize();
	//Set Setpoint to 0 RPM
	Setpoint = 0;
}
 124:	e1 ec       	ldi	r30, 0xC1	; 193
 126:	f0 e0       	ldi	r31, 0x00	; 0
 128:	80 81       	ld	r24, Z
 12a:	88 69       	ori	r24, 0x98	; 152
 12c:	80 83       	st	Z, r24
 12e:	a2 ec       	ldi	r26, 0xC2	; 194
 130:	b0 e0       	ldi	r27, 0x00	; 0
 132:	8c 91       	ld	r24, X
 134:	86 60       	ori	r24, 0x06	; 6
 136:	8c 93       	st	X, r24
 138:	80 81       	ld	r24, Z
 13a:	80 68       	ori	r24, 0x80	; 128
 13c:	80 83       	st	Z, r24
 13e:	10 92 c5 00 	sts	0x00C5, r1
 142:	87 e6       	ldi	r24, 0x67	; 103
 144:	80 93 c4 00 	sts	0x00C4, r24
 148:	08 95       	ret

0000014a <timer0Init>:
 14a:	ee e6       	ldi	r30, 0x6E	; 110
 14c:	f0 e0       	ldi	r31, 0x00	; 0
 14e:	80 81       	ld	r24, Z
 150:	81 60       	ori	r24, 0x01	; 1
 152:	80 83       	st	Z, r24
 154:	85 b5       	in	r24, 0x25	; 37
 156:	85 60       	ori	r24, 0x05	; 5
 158:	85 bd       	out	0x25, r24	; 37
 15a:	16 bc       	out	0x26, r1	; 38
 15c:	08 95       	ret

0000015e <timer2Init>:
 15e:	e0 eb       	ldi	r30, 0xB0	; 176
 160:	f0 e0       	ldi	r31, 0x00	; 0
 162:	80 81       	ld	r24, Z
 164:	83 6a       	ori	r24, 0xA3	; 163
 166:	80 83       	st	Z, r24
 168:	e1 eb       	ldi	r30, 0xB1	; 177
 16a:	f0 e0       	ldi	r31, 0x00	; 0
 16c:	80 81       	ld	r24, Z
 16e:	81 60       	ori	r24, 0x01	; 1
 170:	80 83       	st	Z, r24
 172:	10 92 b3 00 	sts	0x00B3, r1
 176:	24 9a       	sbi	0x04, 4	; 4
 178:	e1 e0       	ldi	r30, 0x01	; 1
 17a:	f1 e0       	ldi	r31, 0x01	; 1
 17c:	80 81       	ld	r24, Z
 17e:	80 64       	ori	r24, 0x40	; 64
 180:	80 83       	st	Z, r24
 182:	08 95       	ret

00000184 <externalInterrupts>:
 184:	52 98       	cbi	0x0a, 2	; 10
 186:	5a 9a       	sbi	0x0b, 2	; 11
 188:	6d 98       	cbi	0x0d, 5	; 13
 18a:	75 9a       	sbi	0x0e, 5	; 14
 18c:	e9 e6       	ldi	r30, 0x69	; 105
 18e:	f0 e0       	ldi	r31, 0x00	; 0
 190:	80 81       	ld	r24, Z
 192:	80 62       	ori	r24, 0x20	; 32
 194:	80 83       	st	Z, r24
 196:	ea e6       	ldi	r30, 0x6A	; 106
 198:	f0 e0       	ldi	r31, 0x00	; 0
 19a:	80 81       	ld	r24, Z
 19c:	8a 60       	ori	r24, 0x0A	; 10
 19e:	80 83       	st	Z, r24
 1a0:	8d b3       	in	r24, 0x1d	; 29
 1a2:	84 63       	ori	r24, 0x34	; 52
 1a4:	8d bb       	out	0x1d, r24	; 29
 1a6:	08 95       	ret

000001a8 <uartSendc>:
 1a8:	90 91 c0 00 	lds	r25, 0x00C0
 1ac:	95 ff       	sbrs	r25, 5
 1ae:	fc cf       	rjmp	.-8      	; 0x1a8 <uartSendc>
 1b0:	80 93 c6 00 	sts	0x00C6, r24
 1b4:	08 95       	ret

000001b6 <rampMotorSpeed>:
 1b6:	90 e0       	ldi	r25, 0x00	; 0
 1b8:	a0 e0       	ldi	r26, 0x00	; 0
 1ba:	b0 e0       	ldi	r27, 0x00	; 0
 1bc:	40 91 07 02 	lds	r20, 0x0207
 1c0:	50 91 08 02 	lds	r21, 0x0208
 1c4:	60 91 09 02 	lds	r22, 0x0209
 1c8:	70 91 0a 02 	lds	r23, 0x020A
 1cc:	84 17       	cp	r24, r20
 1ce:	95 07       	cpc	r25, r21
 1d0:	a6 07       	cpc	r26, r22
 1d2:	b7 07       	cpc	r27, r23
 1d4:	a0 f1       	brcs	.+104    	; 0x23e <rampMotorSpeed+0x88>
 1d6:	20 91 06 02 	lds	r18, 0x0206
 1da:	22 23       	and	r18, r18
 1dc:	b9 f3       	breq	.-18     	; 0x1cc <rampMotorSpeed+0x16>
 1de:	20 91 00 02 	lds	r18, 0x0200
 1e2:	30 91 01 02 	lds	r19, 0x0201
 1e6:	2f 3f       	cpi	r18, 0xFF	; 255
 1e8:	31 05       	cpc	r19, r1
 1ea:	34 f4       	brge	.+12     	; 0x1f8 <rampMotorSpeed+0x42>
 1ec:	2f 5f       	subi	r18, 0xFF	; 255
 1ee:	3f 4f       	sbci	r19, 0xFF	; 255
 1f0:	30 93 01 02 	sts	0x0201, r19
 1f4:	20 93 00 02 	sts	0x0200, r18
 1f8:	20 91 00 02 	lds	r18, 0x0200
 1fc:	20 93 b3 00 	sts	0x00B3, r18
 200:	10 92 06 02 	sts	0x0206, r1
 204:	db cf       	rjmp	.-74     	; 0x1bc <rampMotorSpeed+0x6>
 206:	48 17       	cp	r20, r24
 208:	59 07       	cpc	r21, r25
 20a:	6a 07       	cpc	r22, r26
 20c:	7b 07       	cpc	r23, r27
 20e:	00 f1       	brcs	.+64     	; 0x250 <rampMotorSpeed+0x9a>
 210:	20 91 06 02 	lds	r18, 0x0206
 214:	22 23       	and	r18, r18
 216:	b9 f3       	breq	.-18     	; 0x206 <rampMotorSpeed+0x50>
 218:	20 91 00 02 	lds	r18, 0x0200
 21c:	30 91 01 02 	lds	r19, 0x0201
 220:	12 16       	cp	r1, r18
 222:	13 06       	cpc	r1, r19
 224:	34 f4       	brge	.+12     	; 0x232 <rampMotorSpeed+0x7c>
 226:	21 50       	subi	r18, 0x01	; 1
 228:	31 09       	sbc	r19, r1
 22a:	30 93 01 02 	sts	0x0201, r19
 22e:	20 93 00 02 	sts	0x0200, r18
 232:	20 91 00 02 	lds	r18, 0x0200
 236:	20 93 b3 00 	sts	0x00B3, r18
 23a:	10 92 06 02 	sts	0x0206, r1
 23e:	40 91 07 02 	lds	r20, 0x0207
 242:	50 91 08 02 	lds	r21, 0x0208
 246:	60 91 09 02 	lds	r22, 0x0209
 24a:	70 91 0a 02 	lds	r23, 0x020A
 24e:	db cf       	rjmp	.-74     	; 0x206 <rampMotorSpeed+0x50>
 250:	08 95       	ret

00000252 <driveStepper>:
 252:	98 b1       	in	r25, 0x08	; 8
 254:	90 7f       	andi	r25, 0xF0	; 240
 256:	98 b9       	out	0x08, r25	; 8
 258:	98 b1       	in	r25, 0x08	; 8
 25a:	93 60       	ori	r25, 0x03	; 3
 25c:	98 b9       	out	0x08, r25	; 8
 25e:	90 e0       	ldi	r25, 0x00	; 0
 260:	20 e0       	ldi	r18, 0x00	; 0
 262:	30 e0       	ldi	r19, 0x00	; 0
 264:	66 23       	and	r22, r22
 266:	41 f1       	breq	.+80     	; 0x2b8 <driveStepper+0x66>
 268:	28 17       	cp	r18, r24
 26a:	39 07       	cpc	r19, r25
 26c:	0c f5       	brge	.+66     	; 0x2b0 <driveStepper+0x5e>
 26e:	48 b1       	in	r20, 0x08	; 8
 270:	4c 60       	ori	r20, 0x0C	; 12
 272:	48 b9       	out	0x08, r20	; 8
 274:	ef e3       	ldi	r30, 0x3F	; 63
 276:	ff e1       	ldi	r31, 0x1F	; 31
 278:	31 97       	sbiw	r30, 0x01	; 1
 27a:	f1 f7       	brne	.-4      	; 0x278 <driveStepper+0x26>
 27c:	00 c0       	rjmp	.+0      	; 0x27e <driveStepper+0x2c>
 27e:	00 00       	nop
 280:	42 98       	cbi	0x08, 2	; 8
 282:	ef e3       	ldi	r30, 0x3F	; 63
 284:	ff e1       	ldi	r31, 0x1F	; 31
 286:	31 97       	sbiw	r30, 0x01	; 1
 288:	f1 f7       	brne	.-4      	; 0x286 <driveStepper+0x34>
 28a:	00 c0       	rjmp	.+0      	; 0x28c <driveStepper+0x3a>
 28c:	00 00       	nop
 28e:	43 98       	cbi	0x08, 3	; 8
 290:	ef e3       	ldi	r30, 0x3F	; 63
 292:	ff e1       	ldi	r31, 0x1F	; 31
 294:	31 97       	sbiw	r30, 0x01	; 1
 296:	f1 f7       	brne	.-4      	; 0x294 <driveStepper+0x42>
 298:	00 c0       	rjmp	.+0      	; 0x29a <driveStepper+0x48>
 29a:	00 00       	nop
 29c:	42 9a       	sbi	0x08, 2	; 8
 29e:	ef e3       	ldi	r30, 0x3F	; 63
 2a0:	ff e1       	ldi	r31, 0x1F	; 31
 2a2:	31 97       	sbiw	r30, 0x01	; 1
 2a4:	f1 f7       	brne	.-4      	; 0x2a2 <driveStepper+0x50>
 2a6:	00 c0       	rjmp	.+0      	; 0x2a8 <driveStepper+0x56>
 2a8:	00 00       	nop
 2aa:	2f 5f       	subi	r18, 0xFF	; 255
 2ac:	3f 4f       	sbci	r19, 0xFF	; 255
 2ae:	dc cf       	rjmp	.-72     	; 0x268 <driveStepper+0x16>
 2b0:	88 b1       	in	r24, 0x08	; 8
 2b2:	80 7f       	andi	r24, 0xF0	; 240
 2b4:	88 b9       	out	0x08, r24	; 8
 2b6:	08 95       	ret
 2b8:	28 17       	cp	r18, r24
 2ba:	39 07       	cpc	r19, r25
 2bc:	cc f7       	brge	.-14     	; 0x2b0 <driveStepper+0x5e>
 2be:	42 9a       	sbi	0x08, 2	; 8
 2c0:	43 98       	cbi	0x08, 3	; 8
 2c2:	ef e3       	ldi	r30, 0x3F	; 63
 2c4:	ff e1       	ldi	r31, 0x1F	; 31
 2c6:	31 97       	sbiw	r30, 0x01	; 1
 2c8:	f1 f7       	brne	.-4      	; 0x2c6 <driveStepper+0x74>
 2ca:	00 c0       	rjmp	.+0      	; 0x2cc <driveStepper+0x7a>
 2cc:	00 00       	nop
 2ce:	42 98       	cbi	0x08, 2	; 8
 2d0:	ef e3       	ldi	r30, 0x3F	; 63
 2d2:	ff e1       	ldi	r31, 0x1F	; 31
 2d4:	31 97       	sbiw	r30, 0x01	; 1
 2d6:	f1 f7       	brne	.-4      	; 0x2d4 <driveStepper+0x82>
 2d8:	00 c0       	rjmp	.+0      	; 0x2da <driveStepper+0x88>
 2da:	00 00       	nop
 2dc:	43 9a       	sbi	0x08, 3	; 8
 2de:	ef e3       	ldi	r30, 0x3F	; 63
 2e0:	ff e1       	ldi	r31, 0x1F	; 31
 2e2:	31 97       	sbiw	r30, 0x01	; 1
 2e4:	f1 f7       	brne	.-4      	; 0x2e2 <driveStepper+0x90>
 2e6:	00 c0       	rjmp	.+0      	; 0x2e8 <driveStepper+0x96>
 2e8:	00 00       	nop
 2ea:	42 9a       	sbi	0x08, 2	; 8
 2ec:	ef e3       	ldi	r30, 0x3F	; 63
 2ee:	ff e1       	ldi	r31, 0x1F	; 31
 2f0:	31 97       	sbiw	r30, 0x01	; 1
 2f2:	f1 f7       	brne	.-4      	; 0x2f0 <driveStepper+0x9e>
 2f4:	00 c0       	rjmp	.+0      	; 0x2f6 <driveStepper+0xa4>
 2f6:	00 00       	nop
 2f8:	2f 5f       	subi	r18, 0xFF	; 255
 2fa:	3f 4f       	sbci	r19, 0xFF	; 255
 2fc:	dd cf       	rjmp	.-70     	; 0x2b8 <driveStepper+0x66>

000002fe <main>:

int main(void)
{
	uartInit();
 2fe:	12 df       	rcall	.-476    	; 0x124 <uartInit>
	timer0Init();
 300:	24 df       	rcall	.-440    	; 0x14a <timer0Init>
	timer2Init();
 302:	2d df       	rcall	.-422    	; 0x15e <timer2Init>
	externalInterrupts();
 304:	3f df       	rcall	.-386    	; 0x184 <externalInterrupts>
	DDRB |= (1<<PB4) | (1<<PB5) | (1<<PB7);
 306:	84 b1       	in	r24, 0x04	; 4
 308:	80 6b       	ori	r24, 0xB0	; 176
 30a:	84 b9       	out	0x04, r24	; 4
	//set PC0-3 to output for stepper control
	//PC0-PC3 are used for stepper control
	//PC0=37,   PC1=36,   PC2=35,   PC3=34
	DDRC |= (1<<PC0) | (1<<PC1) | (1<<PC2) | (1<<PC3);
 30c:	87 b1       	in	r24, 0x07	; 7
 30e:	8f 60       	ori	r24, 0x0F	; 15
 310:	87 b9       	out	0x07, r24	; 7
		
	sei();
 312:	78 94       	sei
					}
					//Reload Command
					//TT= 01
					if(uartData[0] == 0b01000000){
						//Move servo backward.
						OCR2B = 60;
 314:	cc e3       	ldi	r28, 0x3C	; 60
		
	sei();
	
    while(1)
	    {
				if(i >= 2){
 316:	80 91 03 02 	lds	r24, 0x0203
 31a:	82 30       	cpi	r24, 0x02	; 2
 31c:	78 f1       	brcs	.+94     	; 0x37c <main+0x7e>
					//Echo back received data
					uartSendc(uartData[0]);
 31e:	80 91 04 02 	lds	r24, 0x0204
 322:	42 df       	rcall	.-380    	; 0x1a8 <uartSendc>
					uartSendc(uartData[1]);
 324:	80 91 05 02 	lds	r24, 0x0205
 328:	3f df       	rcall	.-386    	; 0x1a8 <uartSendc>
					//Serial Command Packet: TTIIIIID
					//TT=00 (motor). IIIII=00000 (launcher motor). D=0/1 (forward/backward)
					
					//Motor 0 (launcher) forward control
					if(uartData[0] == 0b00000000){
 32a:	80 91 04 02 	lds	r24, 0x0204
 32e:	81 11       	cpse	r24, r1
 330:	05 c0       	rjmp	.+10     	; 0x33c <main+0x3e>
						PORTB &= ~(1<<PB5);
 332:	2d 98       	cbi	0x05, 5	; 5
//						rampMotorSpeed(uartData[1]);
						OCR2A = uartData[1];
 334:	80 91 05 02 	lds	r24, 0x0205
 338:	80 93 b3 00 	sts	0x00B3, r24
					}	
					//Motor 0 (launcher) backward control			
					if(uartData[0] == 0b00000001){
 33c:	80 91 04 02 	lds	r24, 0x0204
 340:	81 30       	cpi	r24, 0x01	; 1
 342:	21 f4       	brne	.+8      	; 0x34c <main+0x4e>
						PORTB |= (1<<PB5);
 344:	2d 9a       	sbi	0x05, 5	; 5
						rampMotorSpeed(uartData[1]);
 346:	80 91 05 02 	lds	r24, 0x0205
 34a:	35 df       	rcall	.-406    	; 0x1b6 <rampMotorSpeed>
//						OCR2A = uartData[1];
					}
					//Reload Command
					//TT= 01
					if(uartData[0] == 0b01000000){
 34c:	80 91 04 02 	lds	r24, 0x0204
 350:	80 34       	cpi	r24, 0x40	; 64
 352:	11 f4       	brne	.+4      	; 0x358 <main+0x5a>
						//Move servo backward.
						OCR2B = 60;
 354:	c0 93 b4 00 	sts	0x00B4, r28
						
						//Reverse direction of Servo and move backward.

					}
					//Carriage (Motor 1) forward control
					if(uartData[0] == 0b00000010){
 358:	80 91 04 02 	lds	r24, 0x0204
 35c:	82 30       	cpi	r24, 0x02	; 2
 35e:	21 f4       	brne	.+8      	; 0x368 <main+0x6a>
						//ToDo: need stepper motor/weight estimate for chassis.
						//counterclockwise rotation
						driveStepper(uartData[1], 1);
 360:	80 91 05 02 	lds	r24, 0x0205
 364:	61 e0       	ldi	r22, 0x01	; 1
 366:	75 df       	rcall	.-278    	; 0x252 <driveStepper>
					}
					//Carriage (Motor 1) backward control
					if(uartData[0] == 0b00000011){
 368:	80 91 04 02 	lds	r24, 0x0204
 36c:	83 30       	cpi	r24, 0x03	; 3
 36e:	21 f4       	brne	.+8      	; 0x378 <main+0x7a>
						//ToDo: need stepper motor/weight estimate for chassis. 	
						//clockwise rotation
						driveStepper(uartData[1], 0);
 370:	80 91 05 02 	lds	r24, 0x0205
 374:	60 e0       	ldi	r22, 0x00	; 0
 376:	6d df       	rcall	.-294    	; 0x252 <driveStepper>
					}
					i = 0;
 378:	10 92 03 02 	sts	0x0203, r1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 37c:	2f ef       	ldi	r18, 0xFF	; 255
 37e:	84 e3       	ldi	r24, 0x34	; 52
 380:	9c e0       	ldi	r25, 0x0C	; 12
 382:	21 50       	subi	r18, 0x01	; 1
 384:	80 40       	sbci	r24, 0x00	; 0
 386:	90 40       	sbci	r25, 0x00	; 0
 388:	e1 f7       	brne	.-8      	; 0x382 <main+0x84>
 38a:	00 c0       	rjmp	.+0      	; 0x38c <main+0x8e>
 38c:	00 00       	nop
 38e:	c3 cf       	rjmp	.-122    	; 0x316 <main+0x18>

00000390 <__vector_23>:
				_delay_ms(250);
		}
}


ISR(TIMER0_OVF_vect){
 390:	1f 92       	push	r1
 392:	0f 92       	push	r0
 394:	0f b6       	in	r0, 0x3f	; 63
 396:	0f 92       	push	r0
 398:	11 24       	eor	r1, r1
 39a:	0b b6       	in	r0, 0x3b	; 59
 39c:	0f 92       	push	r0
 39e:	2f 93       	push	r18
 3a0:	3f 93       	push	r19
 3a2:	4f 93       	push	r20
 3a4:	5f 93       	push	r21
 3a6:	6f 93       	push	r22
 3a8:	7f 93       	push	r23
 3aa:	8f 93       	push	r24
 3ac:	9f 93       	push	r25
 3ae:	af 93       	push	r26
 3b0:	bf 93       	push	r27
 3b2:	ef 93       	push	r30
 3b4:	ff 93       	push	r31
	//60 ticks is a second. 6 is a .1 sec
	//only send speed once a second.
	if(tick == 60){
 3b6:	80 91 2e 02 	lds	r24, 0x022E
 3ba:	8c 33       	cpi	r24, 0x3C	; 60
 3bc:	19 f4       	brne	.+6      	; 0x3c4 <__vector_23+0x34>
		uartSendc(rotation);
 3be:	80 91 0b 02 	lds	r24, 0x020B
 3c2:	f2 de       	rcall	.-540    	; 0x1a8 <uartSendc>
	}
	//12 ticks is 200ms. This gives 300 RPM minimum or 5 RPS
	if(tick == 12){
 3c4:	80 91 2e 02 	lds	r24, 0x022E
 3c8:	8c 30       	cpi	r24, 0x0C	; 12
 3ca:	21 f5       	brne	.+72     	; 0x414 <__vector_23+0x84>
		tick = 0;
 3cc:	10 92 2e 02 	sts	0x022E, r1
		//rotations/200ms * 1000ms/1s * 60s/min
		RPM = rotation * 300; 
 3d0:	80 91 0b 02 	lds	r24, 0x020B
 3d4:	90 91 0c 02 	lds	r25, 0x020C
 3d8:	4c e2       	ldi	r20, 0x2C	; 44
 3da:	51 e0       	ldi	r21, 0x01	; 1
 3dc:	84 9f       	mul	r24, r20
 3de:	90 01       	movw	r18, r0
 3e0:	85 9f       	mul	r24, r21
 3e2:	30 0d       	add	r19, r0
 3e4:	94 9f       	mul	r25, r20
 3e6:	30 0d       	add	r19, r0
 3e8:	11 24       	eor	r1, r1
 3ea:	30 93 25 02 	sts	0x0225, r19
 3ee:	20 93 24 02 	sts	0x0224, r18
		lastRotation = rotation;
 3f2:	a0 e0       	ldi	r26, 0x00	; 0
 3f4:	b0 e0       	ldi	r27, 0x00	; 0
 3f6:	80 93 07 02 	sts	0x0207, r24
 3fa:	90 93 08 02 	sts	0x0208, r25
 3fe:	a0 93 09 02 	sts	0x0209, r26
 402:	b0 93 0a 02 	sts	0x020A, r27
//			PIDinput = (rotation);
//			PIDcompute();
//		}
		//its been 1s check the counter
//		uartSendc((uint8_t)PIDoutput);
		rotation = 0;
 406:	10 92 0c 02 	sts	0x020C, r1
 40a:	10 92 0b 02 	sts	0x020B, r1
		rotationUpdated = 1;
 40e:	81 e0       	ldi	r24, 0x01	; 1
 410:	80 93 06 02 	sts	0x0206, r24
		//(Rotation/50ms) * (1000ms/sec) * (60sec/min) = RPM - not correct anymore
		PIDinput = (rotation);
		PIDcompute();
	}
	*/
	tick++;
 414:	80 91 2e 02 	lds	r24, 0x022E
 418:	8f 5f       	subi	r24, 0xFF	; 255
 41a:	80 93 2e 02 	sts	0x022E, r24
}
 41e:	ff 91       	pop	r31
 420:	ef 91       	pop	r30
 422:	bf 91       	pop	r27
 424:	af 91       	pop	r26
 426:	9f 91       	pop	r25
 428:	8f 91       	pop	r24
 42a:	7f 91       	pop	r23
 42c:	6f 91       	pop	r22
 42e:	5f 91       	pop	r21
 430:	4f 91       	pop	r20
 432:	3f 91       	pop	r19
 434:	2f 91       	pop	r18
 436:	0f 90       	pop	r0
 438:	0b be       	out	0x3b, r0	; 59
 43a:	0f 90       	pop	r0
 43c:	0f be       	out	0x3f, r0	; 63
 43e:	0f 90       	pop	r0
 440:	1f 90       	pop	r1
 442:	18 95       	reti

00000444 <__vector_5>:

ISR(INT4_vect){
 444:	1f 92       	push	r1
 446:	0f 92       	push	r0
 448:	0f b6       	in	r0, 0x3f	; 63
 44a:	0f 92       	push	r0
 44c:	11 24       	eor	r1, r1
 44e:	8f 93       	push	r24
 450:	9f 93       	push	r25
	//Optical encoder feedback from Launching motor
	//Input pin is Digital 2
	rotation++;
 452:	80 91 0b 02 	lds	r24, 0x020B
 456:	90 91 0c 02 	lds	r25, 0x020C
 45a:	01 96       	adiw	r24, 0x01	; 1
 45c:	90 93 0c 02 	sts	0x020C, r25
 460:	80 93 0b 02 	sts	0x020B, r24
}
 464:	9f 91       	pop	r25
 466:	8f 91       	pop	r24
 468:	0f 90       	pop	r0
 46a:	0f be       	out	0x3f, r0	; 63
 46c:	0f 90       	pop	r0
 46e:	1f 90       	pop	r1
 470:	18 95       	reti

00000472 <__vector_6>:
ISR(INT5_vect){
 472:	1f 92       	push	r1
 474:	0f 92       	push	r0
 476:	0f b6       	in	r0, 0x3f	; 63
 478:	0f 92       	push	r0
 47a:	11 24       	eor	r1, r1
	//Forward limit switch - stop the motor from moving.
	//Switch should be attached to ground and Digital 3
	OCR2B = 0; 
 47c:	10 92 b4 00 	sts	0x00B4, r1
}
 480:	0f 90       	pop	r0
 482:	0f be       	out	0x3f, r0	; 63
 484:	0f 90       	pop	r0
 486:	1f 90       	pop	r1
 488:	18 95       	reti

0000048a <__vector_3>:
ISR(INT2_vect){
 48a:	1f 92       	push	r1
 48c:	0f 92       	push	r0
 48e:	0f b6       	in	r0, 0x3f	; 63
 490:	0f 92       	push	r0
 492:	11 24       	eor	r1, r1
 494:	8f 93       	push	r24
	//Rear limit switch - reverses direction of motor.
	//Should be attached to ground and Digital 19.
	OCR2B = 239;
 496:	8f ee       	ldi	r24, 0xEF	; 239
 498:	80 93 b4 00 	sts	0x00B4, r24
}
 49c:	8f 91       	pop	r24
 49e:	0f 90       	pop	r0
 4a0:	0f be       	out	0x3f, r0	; 63
 4a2:	0f 90       	pop	r0
 4a4:	1f 90       	pop	r1
 4a6:	18 95       	reti

000004a8 <__vector_25>:

ISR(USART0_RX_vect){
 4a8:	1f 92       	push	r1
 4aa:	0f 92       	push	r0
 4ac:	0f b6       	in	r0, 0x3f	; 63
 4ae:	0f 92       	push	r0
 4b0:	11 24       	eor	r1, r1
 4b2:	0b b6       	in	r0, 0x3b	; 59
 4b4:	0f 92       	push	r0
 4b6:	8f 93       	push	r24
 4b8:	ef 93       	push	r30
 4ba:	ff 93       	push	r31
	uartData[i] = UDR0;
 4bc:	e0 91 03 02 	lds	r30, 0x0203
 4c0:	f0 e0       	ldi	r31, 0x00	; 0
 4c2:	80 91 c6 00 	lds	r24, 0x00C6
 4c6:	ec 5f       	subi	r30, 0xFC	; 252
 4c8:	fd 4f       	sbci	r31, 0xFD	; 253
 4ca:	80 83       	st	Z, r24
	i++;
 4cc:	80 91 03 02 	lds	r24, 0x0203
 4d0:	8f 5f       	subi	r24, 0xFF	; 255
 4d2:	80 93 03 02 	sts	0x0203, r24
	if(i >= 2){
 4d6:	80 91 03 02 	lds	r24, 0x0203
 4da:	82 30       	cpi	r24, 0x02	; 2
 4dc:	18 f0       	brcs	.+6      	; 0x4e4 <__vector_25+0x3c>
		uartPacketReady = true;
 4de:	81 e0       	ldi	r24, 0x01	; 1
 4e0:	80 93 02 02 	sts	0x0202, r24
	}
}
 4e4:	ff 91       	pop	r31
 4e6:	ef 91       	pop	r30
 4e8:	8f 91       	pop	r24
 4ea:	0f 90       	pop	r0
 4ec:	0b be       	out	0x3b, r0	; 59
 4ee:	0f 90       	pop	r0
 4f0:	0f be       	out	0x3f, r0	; 63
 4f2:	0f 90       	pop	r0
 4f4:	1f 90       	pop	r1
 4f6:	18 95       	reti

000004f8 <_exit>:
 4f8:	f8 94       	cli

000004fa <__stop_program>:
 4fa:	ff cf       	rjmp	.-2      	; 0x4fa <__stop_program>
