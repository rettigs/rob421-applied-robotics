
Applied_Robotics.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000004e  00800200  00000d12  00000da6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000d12  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000052  0080024e  0080024e  00000df4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000df4  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000000b8  00000000  00000000  00000e24  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000ae3  00000000  00000000  00000edc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000344  00000000  00000000  000019bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000818  00000000  00000000  00001d03  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000314  00000000  00000000  0000251c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000485  00000000  00000000  00002830  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000b3f  00000000  00000000  00002cb5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000c0  00000000  00000000  000037f4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	7a c0       	rjmp	.+244    	; 0xf6 <__ctors_end>
   2:	00 00       	nop
   4:	97 c0       	rjmp	.+302    	; 0x134 <__bad_interrupt>
   6:	00 00       	nop
   8:	95 c0       	rjmp	.+298    	; 0x134 <__bad_interrupt>
   a:	00 00       	nop
   c:	93 c0       	rjmp	.+294    	; 0x134 <__bad_interrupt>
   e:	00 00       	nop
  10:	91 c0       	rjmp	.+290    	; 0x134 <__bad_interrupt>
  12:	00 00       	nop
  14:	3c c4       	rjmp	.+2168   	; 0x88e <__vector_5>
  16:	00 00       	nop
  18:	8d c0       	rjmp	.+282    	; 0x134 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	8b c0       	rjmp	.+278    	; 0x134 <__bad_interrupt>
  1e:	00 00       	nop
  20:	89 c0       	rjmp	.+274    	; 0x134 <__bad_interrupt>
  22:	00 00       	nop
  24:	87 c0       	rjmp	.+270    	; 0x134 <__bad_interrupt>
  26:	00 00       	nop
  28:	85 c0       	rjmp	.+266    	; 0x134 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	83 c0       	rjmp	.+262    	; 0x134 <__bad_interrupt>
  2e:	00 00       	nop
  30:	81 c0       	rjmp	.+258    	; 0x134 <__bad_interrupt>
  32:	00 00       	nop
  34:	7f c0       	rjmp	.+254    	; 0x134 <__bad_interrupt>
  36:	00 00       	nop
  38:	7d c0       	rjmp	.+250    	; 0x134 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	7b c0       	rjmp	.+246    	; 0x134 <__bad_interrupt>
  3e:	00 00       	nop
  40:	79 c0       	rjmp	.+242    	; 0x134 <__bad_interrupt>
  42:	00 00       	nop
  44:	77 c0       	rjmp	.+238    	; 0x134 <__bad_interrupt>
  46:	00 00       	nop
  48:	75 c0       	rjmp	.+234    	; 0x134 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	73 c0       	rjmp	.+230    	; 0x134 <__bad_interrupt>
  4e:	00 00       	nop
  50:	71 c0       	rjmp	.+226    	; 0x134 <__bad_interrupt>
  52:	00 00       	nop
  54:	6f c0       	rjmp	.+222    	; 0x134 <__bad_interrupt>
  56:	00 00       	nop
  58:	6d c0       	rjmp	.+218    	; 0x134 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	b8 c3       	rjmp	.+1904   	; 0x7ce <__vector_23>
  5e:	00 00       	nop
  60:	69 c0       	rjmp	.+210    	; 0x134 <__bad_interrupt>
  62:	00 00       	nop
  64:	3c c4       	rjmp	.+2168   	; 0x8de <__vector_25>
  66:	00 00       	nop
  68:	65 c0       	rjmp	.+202    	; 0x134 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	63 c0       	rjmp	.+198    	; 0x134 <__bad_interrupt>
  6e:	00 00       	nop
  70:	61 c0       	rjmp	.+194    	; 0x134 <__bad_interrupt>
  72:	00 00       	nop
  74:	5f c0       	rjmp	.+190    	; 0x134 <__bad_interrupt>
  76:	00 00       	nop
  78:	5d c0       	rjmp	.+186    	; 0x134 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	5b c0       	rjmp	.+182    	; 0x134 <__bad_interrupt>
  7e:	00 00       	nop
  80:	59 c0       	rjmp	.+178    	; 0x134 <__bad_interrupt>
  82:	00 00       	nop
  84:	57 c0       	rjmp	.+174    	; 0x134 <__bad_interrupt>
  86:	00 00       	nop
  88:	55 c0       	rjmp	.+170    	; 0x134 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	53 c0       	rjmp	.+166    	; 0x134 <__bad_interrupt>
  8e:	00 00       	nop
  90:	51 c0       	rjmp	.+162    	; 0x134 <__bad_interrupt>
  92:	00 00       	nop
  94:	4f c0       	rjmp	.+158    	; 0x134 <__bad_interrupt>
  96:	00 00       	nop
  98:	4d c0       	rjmp	.+154    	; 0x134 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	4b c0       	rjmp	.+150    	; 0x134 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	49 c0       	rjmp	.+146    	; 0x134 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	47 c0       	rjmp	.+142    	; 0x134 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	45 c0       	rjmp	.+138    	; 0x134 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	43 c0       	rjmp	.+134    	; 0x134 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	41 c0       	rjmp	.+130    	; 0x134 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	3f c0       	rjmp	.+126    	; 0x134 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	3d c0       	rjmp	.+122    	; 0x134 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	3b c0       	rjmp	.+118    	; 0x134 <__bad_interrupt>
  be:	00 00       	nop
  c0:	39 c0       	rjmp	.+114    	; 0x134 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	37 c0       	rjmp	.+110    	; 0x134 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	35 c0       	rjmp	.+106    	; 0x134 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	33 c0       	rjmp	.+102    	; 0x134 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	31 c0       	rjmp	.+98     	; 0x134 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	2f c0       	rjmp	.+94     	; 0x134 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	2d c0       	rjmp	.+90     	; 0x134 <__bad_interrupt>
  da:	00 00       	nop
  dc:	2b c0       	rjmp	.+86     	; 0x134 <__bad_interrupt>
  de:	00 00       	nop
  e0:	29 c0       	rjmp	.+82     	; 0x134 <__bad_interrupt>
  e2:	00 00       	nop
  e4:	87 02       	muls	r24, r23
  e6:	8c 02       	muls	r24, r28
  e8:	c8 02       	muls	r28, r24
  ea:	cd 02       	muls	r28, r29
  ec:	51 03       	mulsu	r21, r17
  ee:	89 03       	fmulsu	r16, r17
  f0:	9f 03       	fmulsu	r17, r23
  f2:	b6 03       	fmuls	r19, r22
  f4:	ce 03       	fmulsu	r20, r22

000000f6 <__ctors_end>:
  f6:	11 24       	eor	r1, r1
  f8:	1f be       	out	0x3f, r1	; 63
  fa:	cf ef       	ldi	r28, 0xFF	; 255
  fc:	d1 e2       	ldi	r29, 0x21	; 33
  fe:	de bf       	out	0x3e, r29	; 62
 100:	cd bf       	out	0x3d, r28	; 61
 102:	00 e0       	ldi	r16, 0x00	; 0
 104:	0c bf       	out	0x3c, r16	; 60

00000106 <__do_copy_data>:
 106:	12 e0       	ldi	r17, 0x02	; 2
 108:	a0 e0       	ldi	r26, 0x00	; 0
 10a:	b2 e0       	ldi	r27, 0x02	; 2
 10c:	e2 e1       	ldi	r30, 0x12	; 18
 10e:	fd e0       	ldi	r31, 0x0D	; 13
 110:	00 e0       	ldi	r16, 0x00	; 0
 112:	0b bf       	out	0x3b, r16	; 59
 114:	02 c0       	rjmp	.+4      	; 0x11a <__do_copy_data+0x14>
 116:	07 90       	elpm	r0, Z+
 118:	0d 92       	st	X+, r0
 11a:	ae 34       	cpi	r26, 0x4E	; 78
 11c:	b1 07       	cpc	r27, r17
 11e:	d9 f7       	brne	.-10     	; 0x116 <__do_copy_data+0x10>

00000120 <__do_clear_bss>:
 120:	22 e0       	ldi	r18, 0x02	; 2
 122:	ae e4       	ldi	r26, 0x4E	; 78
 124:	b2 e0       	ldi	r27, 0x02	; 2
 126:	01 c0       	rjmp	.+2      	; 0x12a <.do_clear_bss_start>

00000128 <.do_clear_bss_loop>:
 128:	1d 92       	st	X+, r1

0000012a <.do_clear_bss_start>:
 12a:	a0 3a       	cpi	r26, 0xA0	; 160
 12c:	b2 07       	cpc	r27, r18
 12e:	e1 f7       	brne	.-8      	; 0x128 <.do_clear_bss_loop>
 130:	cf d1       	rcall	.+926    	; 0x4d0 <main>
 132:	ed c5       	rjmp	.+3034   	; 0xd0e <_exit>

00000134 <__bad_interrupt>:
 134:	65 cf       	rjmp	.-310    	; 0x0 <__vectors>

00000136 <uartInit>:
	inAuto = newAuto;
}

void PIDsetControllerDirection(int Direction)
{
	controllerDirection = Direction;
 136:	e1 ec       	ldi	r30, 0xC1	; 193
 138:	f0 e0       	ldi	r31, 0x00	; 0
 13a:	80 81       	ld	r24, Z
 13c:	88 69       	ori	r24, 0x98	; 152
 13e:	80 83       	st	Z, r24
 140:	a2 ec       	ldi	r26, 0xC2	; 194
 142:	b0 e0       	ldi	r27, 0x00	; 0
 144:	8c 91       	ld	r24, X
 146:	86 60       	ori	r24, 0x06	; 6
 148:	8c 93       	st	X, r24
 14a:	80 81       	ld	r24, Z
 14c:	80 68       	ori	r24, 0x80	; 128
 14e:	80 83       	st	Z, r24
 150:	10 92 c5 00 	sts	0x00C5, r1
 154:	87 e6       	ldi	r24, 0x67	; 103
 156:	80 93 c4 00 	sts	0x00C4, r24
 15a:	08 95       	ret

0000015c <timer0Init>:
 15c:	ee e6       	ldi	r30, 0x6E	; 110
 15e:	f0 e0       	ldi	r31, 0x00	; 0
 160:	80 81       	ld	r24, Z
 162:	81 60       	ori	r24, 0x01	; 1
 164:	80 83       	st	Z, r24
 166:	85 b5       	in	r24, 0x25	; 37
 168:	85 60       	ori	r24, 0x05	; 5
 16a:	85 bd       	out	0x25, r24	; 37
 16c:	16 bc       	out	0x26, r1	; 38
 16e:	08 95       	ret

00000170 <timer2Init>:
 170:	e0 eb       	ldi	r30, 0xB0	; 176
 172:	f0 e0       	ldi	r31, 0x00	; 0
 174:	80 81       	ld	r24, Z
 176:	83 68       	ori	r24, 0x83	; 131
 178:	80 83       	st	Z, r24
 17a:	e1 eb       	ldi	r30, 0xB1	; 177
 17c:	f0 e0       	ldi	r31, 0x00	; 0
 17e:	80 81       	ld	r24, Z
 180:	81 60       	ori	r24, 0x01	; 1
 182:	80 83       	st	Z, r24
 184:	10 92 b3 00 	sts	0x00B3, r1
 188:	24 9a       	sbi	0x04, 4	; 4
 18a:	08 95       	ret

0000018c <externalInterrupts>:
 18c:	6c 98       	cbi	0x0d, 4	; 13
 18e:	ea e6       	ldi	r30, 0x6A	; 106
 190:	f0 e0       	ldi	r31, 0x00	; 0
 192:	80 81       	ld	r24, Z
 194:	81 60       	ori	r24, 0x01	; 1
 196:	80 83       	st	Z, r24
 198:	ec 9a       	sbi	0x1d, 4	; 29
 19a:	08 95       	ret

0000019c <uartSendc>:
 19c:	90 91 c0 00 	lds	r25, 0x00C0
 1a0:	95 ff       	sbrs	r25, 5
 1a2:	fc cf       	rjmp	.-8      	; 0x19c <uartSendc>
 1a4:	80 93 c6 00 	sts	0x00C6, r24
 1a8:	08 95       	ret

000001aa <uartSends>:
 1aa:	cf 93       	push	r28
 1ac:	df 93       	push	r29
 1ae:	ec 01       	movw	r28, r24
 1b0:	89 91       	ld	r24, Y+
 1b2:	88 23       	and	r24, r24
 1b4:	11 f0       	breq	.+4      	; 0x1ba <uartSends+0x10>
 1b6:	f2 df       	rcall	.-28     	; 0x19c <uartSendc>
 1b8:	fb cf       	rjmp	.-10     	; 0x1b0 <uartSends+0x6>
 1ba:	df 91       	pop	r29
 1bc:	cf 91       	pop	r28
 1be:	08 95       	ret

000001c0 <rampMotorSpeed>:
 1c0:	90 e0       	ldi	r25, 0x00	; 0
 1c2:	a0 e0       	ldi	r26, 0x00	; 0
 1c4:	b0 e0       	ldi	r27, 0x00	; 0
 1c6:	40 91 58 02 	lds	r20, 0x0258
 1ca:	50 91 59 02 	lds	r21, 0x0259
 1ce:	60 91 5a 02 	lds	r22, 0x025A
 1d2:	70 91 5b 02 	lds	r23, 0x025B
 1d6:	84 17       	cp	r24, r20
 1d8:	95 07       	cpc	r25, r21
 1da:	a6 07       	cpc	r26, r22
 1dc:	b7 07       	cpc	r27, r23
 1de:	a0 f1       	brcs	.+104    	; 0x248 <rampMotorSpeed+0x88>
 1e0:	20 91 57 02 	lds	r18, 0x0257
 1e4:	22 23       	and	r18, r18
 1e6:	b9 f3       	breq	.-18     	; 0x1d6 <rampMotorSpeed+0x16>
 1e8:	20 91 4e 02 	lds	r18, 0x024E
 1ec:	30 91 4f 02 	lds	r19, 0x024F
 1f0:	2f 3f       	cpi	r18, 0xFF	; 255
 1f2:	31 05       	cpc	r19, r1
 1f4:	34 f4       	brge	.+12     	; 0x202 <rampMotorSpeed+0x42>
 1f6:	2f 5f       	subi	r18, 0xFF	; 255
 1f8:	3f 4f       	sbci	r19, 0xFF	; 255
 1fa:	30 93 4f 02 	sts	0x024F, r19
 1fe:	20 93 4e 02 	sts	0x024E, r18
 202:	20 91 4e 02 	lds	r18, 0x024E
 206:	20 93 b3 00 	sts	0x00B3, r18
 20a:	10 92 57 02 	sts	0x0257, r1
 20e:	db cf       	rjmp	.-74     	; 0x1c6 <rampMotorSpeed+0x6>
 210:	48 17       	cp	r20, r24
 212:	59 07       	cpc	r21, r25
 214:	6a 07       	cpc	r22, r26
 216:	7b 07       	cpc	r23, r27
 218:	00 f1       	brcs	.+64     	; 0x25a <rampMotorSpeed+0x9a>
 21a:	20 91 57 02 	lds	r18, 0x0257
 21e:	22 23       	and	r18, r18
 220:	b9 f3       	breq	.-18     	; 0x210 <rampMotorSpeed+0x50>
 222:	20 91 4e 02 	lds	r18, 0x024E
 226:	30 91 4f 02 	lds	r19, 0x024F
 22a:	12 16       	cp	r1, r18
 22c:	13 06       	cpc	r1, r19
 22e:	34 f4       	brge	.+12     	; 0x23c <rampMotorSpeed+0x7c>
 230:	21 50       	subi	r18, 0x01	; 1
 232:	31 09       	sbc	r19, r1
 234:	30 93 4f 02 	sts	0x024F, r19
 238:	20 93 4e 02 	sts	0x024E, r18
 23c:	20 91 4e 02 	lds	r18, 0x024E
 240:	20 93 b3 00 	sts	0x00B3, r18
 244:	10 92 57 02 	sts	0x0257, r1
 248:	40 91 58 02 	lds	r20, 0x0258
 24c:	50 91 59 02 	lds	r21, 0x0259
 250:	60 91 5a 02 	lds	r22, 0x025A
 254:	70 91 5b 02 	lds	r23, 0x025B
 258:	db cf       	rjmp	.-74     	; 0x210 <rampMotorSpeed+0x50>
 25a:	08 95       	ret

0000025c <PIDinitialize>:
 25c:	8f 92       	push	r8
 25e:	9f 92       	push	r9
 260:	af 92       	push	r10
 262:	bf 92       	push	r11
 264:	cf 92       	push	r12
 266:	df 92       	push	r13
 268:	ef 92       	push	r14
 26a:	ff 92       	push	r15
 26c:	80 91 9c 02 	lds	r24, 0x029C
 270:	90 91 9d 02 	lds	r25, 0x029D
 274:	a0 91 9e 02 	lds	r26, 0x029E
 278:	b0 91 9f 02 	lds	r27, 0x029F
 27c:	80 93 7f 02 	sts	0x027F, r24
 280:	90 93 80 02 	sts	0x0280, r25
 284:	a0 93 81 02 	sts	0x0281, r26
 288:	b0 93 82 02 	sts	0x0282, r27
 28c:	c0 90 7b 02 	lds	r12, 0x027B
 290:	d0 90 7c 02 	lds	r13, 0x027C
 294:	e0 90 7d 02 	lds	r14, 0x027D
 298:	f0 90 7e 02 	lds	r15, 0x027E
 29c:	c0 92 93 02 	sts	0x0293, r12
 2a0:	d0 92 94 02 	sts	0x0294, r13
 2a4:	e0 92 95 02 	sts	0x0295, r14
 2a8:	f0 92 96 02 	sts	0x0296, r15
 2ac:	80 90 66 02 	lds	r8, 0x0266
 2b0:	90 90 67 02 	lds	r9, 0x0267
 2b4:	a0 90 68 02 	lds	r10, 0x0268
 2b8:	b0 90 69 02 	lds	r11, 0x0269
 2bc:	a5 01       	movw	r20, r10
 2be:	94 01       	movw	r18, r8
 2c0:	c7 01       	movw	r24, r14
 2c2:	b6 01       	movw	r22, r12
 2c4:	b7 d4       	rcall	.+2414   	; 0xc34 <__gesf2>
 2c6:	18 16       	cp	r1, r24
 2c8:	7c f0       	brlt	.+30     	; 0x2e8 <PIDinitialize+0x8c>
 2ca:	80 90 6a 02 	lds	r8, 0x026A
 2ce:	90 90 6b 02 	lds	r9, 0x026B
 2d2:	a0 90 6c 02 	lds	r10, 0x026C
 2d6:	b0 90 6d 02 	lds	r11, 0x026D
 2da:	a5 01       	movw	r20, r10
 2dc:	94 01       	movw	r18, r8
 2de:	c7 01       	movw	r24, r14
 2e0:	b6 01       	movw	r22, r12
 2e2:	8a d3       	rcall	.+1812   	; 0x9f8 <__cmpsf2>
 2e4:	87 ff       	sbrs	r24, 7
 2e6:	08 c0       	rjmp	.+16     	; 0x2f8 <PIDinitialize+0x9c>
 2e8:	80 92 93 02 	sts	0x0293, r8
 2ec:	90 92 94 02 	sts	0x0294, r9
 2f0:	a0 92 95 02 	sts	0x0295, r10
 2f4:	b0 92 96 02 	sts	0x0296, r11
 2f8:	ff 90       	pop	r15
 2fa:	ef 90       	pop	r14
 2fc:	df 90       	pop	r13
 2fe:	cf 90       	pop	r12
 300:	bf 90       	pop	r11
 302:	af 90       	pop	r10
 304:	9f 90       	pop	r9
 306:	8f 90       	pop	r8
 308:	08 95       	ret

0000030a <PIDsetSampleTime>:
 30a:	cf 92       	push	r12
 30c:	df 92       	push	r13
 30e:	ef 92       	push	r14
 310:	ff 92       	push	r15
 312:	cf 93       	push	r28
 314:	df 93       	push	r29
 316:	ec 01       	movw	r28, r24
 318:	18 16       	cp	r1, r24
 31a:	19 06       	cpc	r1, r25
 31c:	0c f0       	brlt	.+2      	; 0x320 <PIDsetSampleTime+0x16>
 31e:	42 c0       	rjmp	.+132    	; 0x3a4 <PIDsetSampleTime+0x9a>
 320:	bc 01       	movw	r22, r24
 322:	88 27       	eor	r24, r24
 324:	77 fd       	sbrc	r23, 7
 326:	80 95       	com	r24
 328:	98 2f       	mov	r25, r24
 32a:	d4 d3       	rcall	.+1960   	; 0xad4 <__floatsisf>
 32c:	6b 01       	movw	r12, r22
 32e:	7c 01       	movw	r14, r24
 330:	60 91 00 02 	lds	r22, 0x0200
 334:	70 91 01 02 	lds	r23, 0x0201
 338:	88 27       	eor	r24, r24
 33a:	77 fd       	sbrc	r23, 7
 33c:	80 95       	com	r24
 33e:	98 2f       	mov	r25, r24
 340:	c9 d3       	rcall	.+1938   	; 0xad4 <__floatsisf>
 342:	9b 01       	movw	r18, r22
 344:	ac 01       	movw	r20, r24
 346:	c7 01       	movw	r24, r14
 348:	b6 01       	movw	r22, r12
 34a:	5a d3       	rcall	.+1716   	; 0xa00 <__divsf3>
 34c:	6b 01       	movw	r12, r22
 34e:	7c 01       	movw	r14, r24
 350:	9b 01       	movw	r18, r22
 352:	ac 01       	movw	r20, r24
 354:	60 91 84 02 	lds	r22, 0x0284
 358:	70 91 85 02 	lds	r23, 0x0285
 35c:	80 91 86 02 	lds	r24, 0x0286
 360:	90 91 87 02 	lds	r25, 0x0287
 364:	6b d4       	rcall	.+2262   	; 0xc3c <__mulsf3>
 366:	60 93 84 02 	sts	0x0284, r22
 36a:	70 93 85 02 	sts	0x0285, r23
 36e:	80 93 86 02 	sts	0x0286, r24
 372:	90 93 87 02 	sts	0x0287, r25
 376:	a7 01       	movw	r20, r14
 378:	96 01       	movw	r18, r12
 37a:	60 91 62 02 	lds	r22, 0x0262
 37e:	70 91 63 02 	lds	r23, 0x0263
 382:	80 91 64 02 	lds	r24, 0x0264
 386:	90 91 65 02 	lds	r25, 0x0265
 38a:	3a d3       	rcall	.+1652   	; 0xa00 <__divsf3>
 38c:	60 93 62 02 	sts	0x0262, r22
 390:	70 93 63 02 	sts	0x0263, r23
 394:	80 93 64 02 	sts	0x0264, r24
 398:	90 93 65 02 	sts	0x0265, r25
 39c:	d0 93 01 02 	sts	0x0201, r29
 3a0:	c0 93 00 02 	sts	0x0200, r28
 3a4:	df 91       	pop	r29
 3a6:	cf 91       	pop	r28
 3a8:	ff 90       	pop	r15
 3aa:	ef 90       	pop	r14
 3ac:	df 90       	pop	r13
 3ae:	cf 90       	pop	r12
 3b0:	08 95       	ret

000003b2 <PIDsetOutputLimits>:
 3b2:	4f 92       	push	r4
 3b4:	5f 92       	push	r5
 3b6:	6f 92       	push	r6
 3b8:	7f 92       	push	r7
 3ba:	8f 92       	push	r8
 3bc:	9f 92       	push	r9
 3be:	af 92       	push	r10
 3c0:	bf 92       	push	r11
 3c2:	cf 92       	push	r12
 3c4:	df 92       	push	r13
 3c6:	ef 92       	push	r14
 3c8:	ff 92       	push	r15
 3ca:	6b 01       	movw	r12, r22
 3cc:	7c 01       	movw	r14, r24
 3ce:	49 01       	movw	r8, r18
 3d0:	5a 01       	movw	r10, r20
 3d2:	30 d4       	rcall	.+2144   	; 0xc34 <__gesf2>
 3d4:	18 16       	cp	r1, r24
 3d6:	0c f4       	brge	.+2      	; 0x3da <PIDsetOutputLimits+0x28>
 3d8:	5e c0       	rjmp	.+188    	; 0x496 <PIDsetOutputLimits+0xe4>
 3da:	c0 92 6a 02 	sts	0x026A, r12
 3de:	d0 92 6b 02 	sts	0x026B, r13
 3e2:	e0 92 6c 02 	sts	0x026C, r14
 3e6:	f0 92 6d 02 	sts	0x026D, r15
 3ea:	80 92 66 02 	sts	0x0266, r8
 3ee:	90 92 67 02 	sts	0x0267, r9
 3f2:	a0 92 68 02 	sts	0x0268, r10
 3f6:	b0 92 69 02 	sts	0x0269, r11
 3fa:	40 90 7b 02 	lds	r4, 0x027B
 3fe:	50 90 7c 02 	lds	r5, 0x027C
 402:	60 90 7d 02 	lds	r6, 0x027D
 406:	70 90 7e 02 	lds	r7, 0x027E
 40a:	a5 01       	movw	r20, r10
 40c:	94 01       	movw	r18, r8
 40e:	c3 01       	movw	r24, r6
 410:	b2 01       	movw	r22, r4
 412:	10 d4       	rcall	.+2080   	; 0xc34 <__gesf2>
 414:	18 16       	cp	r1, r24
 416:	4c f4       	brge	.+18     	; 0x42a <PIDsetOutputLimits+0x78>
 418:	80 92 7b 02 	sts	0x027B, r8
 41c:	90 92 7c 02 	sts	0x027C, r9
 420:	a0 92 7d 02 	sts	0x027D, r10
 424:	b0 92 7e 02 	sts	0x027E, r11
 428:	0f c0       	rjmp	.+30     	; 0x448 <PIDsetOutputLimits+0x96>
 42a:	a7 01       	movw	r20, r14
 42c:	96 01       	movw	r18, r12
 42e:	c3 01       	movw	r24, r6
 430:	b2 01       	movw	r22, r4
 432:	e2 d2       	rcall	.+1476   	; 0x9f8 <__cmpsf2>
 434:	87 ff       	sbrs	r24, 7
 436:	08 c0       	rjmp	.+16     	; 0x448 <PIDsetOutputLimits+0x96>
 438:	c0 92 7b 02 	sts	0x027B, r12
 43c:	d0 92 7c 02 	sts	0x027C, r13
 440:	e0 92 7d 02 	sts	0x027D, r14
 444:	f0 92 7e 02 	sts	0x027E, r15
 448:	40 90 93 02 	lds	r4, 0x0293
 44c:	50 90 94 02 	lds	r5, 0x0294
 450:	60 90 95 02 	lds	r6, 0x0295
 454:	70 90 96 02 	lds	r7, 0x0296
 458:	a5 01       	movw	r20, r10
 45a:	94 01       	movw	r18, r8
 45c:	c3 01       	movw	r24, r6
 45e:	b2 01       	movw	r22, r4
 460:	e9 d3       	rcall	.+2002   	; 0xc34 <__gesf2>
 462:	18 16       	cp	r1, r24
 464:	4c f4       	brge	.+18     	; 0x478 <PIDsetOutputLimits+0xc6>
 466:	80 92 93 02 	sts	0x0293, r8
 46a:	90 92 94 02 	sts	0x0294, r9
 46e:	a0 92 95 02 	sts	0x0295, r10
 472:	b0 92 96 02 	sts	0x0296, r11
 476:	0f c0       	rjmp	.+30     	; 0x496 <PIDsetOutputLimits+0xe4>
 478:	a7 01       	movw	r20, r14
 47a:	96 01       	movw	r18, r12
 47c:	c3 01       	movw	r24, r6
 47e:	b2 01       	movw	r22, r4
 480:	bb d2       	rcall	.+1398   	; 0x9f8 <__cmpsf2>
 482:	87 ff       	sbrs	r24, 7
 484:	08 c0       	rjmp	.+16     	; 0x496 <PIDsetOutputLimits+0xe4>
 486:	c0 92 93 02 	sts	0x0293, r12
 48a:	d0 92 94 02 	sts	0x0294, r13
 48e:	e0 92 95 02 	sts	0x0295, r14
 492:	f0 92 96 02 	sts	0x0296, r15
 496:	ff 90       	pop	r15
 498:	ef 90       	pop	r14
 49a:	df 90       	pop	r13
 49c:	cf 90       	pop	r12
 49e:	bf 90       	pop	r11
 4a0:	af 90       	pop	r10
 4a2:	9f 90       	pop	r9
 4a4:	8f 90       	pop	r8
 4a6:	7f 90       	pop	r7
 4a8:	6f 90       	pop	r6
 4aa:	5f 90       	pop	r5
 4ac:	4f 90       	pop	r4
 4ae:	08 95       	ret

000004b0 <PIDsetMode>:
 4b0:	cf 93       	push	r28
 4b2:	c1 e0       	ldi	r28, 0x01	; 1
 4b4:	01 97       	sbiw	r24, 0x01	; 1
 4b6:	09 f0       	breq	.+2      	; 0x4ba <PIDsetMode+0xa>
 4b8:	c0 e0       	ldi	r28, 0x00	; 0
 4ba:	80 91 52 02 	lds	r24, 0x0252
 4be:	91 e0       	ldi	r25, 0x01	; 1
 4c0:	89 27       	eor	r24, r25
 4c2:	c8 13       	cpse	r28, r24
 4c4:	01 c0       	rjmp	.+2      	; 0x4c8 <PIDsetMode+0x18>
 4c6:	ca de       	rcall	.-620    	; 0x25c <PIDinitialize>
 4c8:	c0 93 52 02 	sts	0x0252, r28
 4cc:	cf 91       	pop	r28
 4ce:	08 95       	ret

000004d0 <main>:
}

int main(void)
{
	uartInit();
 4d0:	32 de       	rcall	.-924    	; 0x136 <uartInit>
	timer0Init();
 4d2:	44 de       	rcall	.-888    	; 0x15c <timer0Init>
	timer2Init();
 4d4:	4d de       	rcall	.-870    	; 0x170 <timer2Init>
	externalInterrupts();
 4d6:	5a de       	rcall	.-844    	; 0x18c <externalInterrupts>
	DDRB |= (1<<PB4) | (1<<PB5) | (1<<PB7);
 4d8:	84 b1       	in	r24, 0x04	; 4
 4da:	80 6b       	ori	r24, 0xB0	; 176
 4dc:	84 b9       	out	0x04, r24	; 4
	//set PC0-3 to output for stepper control
	DDRC |= (1<<PC0) | (1<<PC1) | (1<<PC2) | (1<<PC3);
 4de:	87 b1       	in	r24, 0x07	; 7
 4e0:	8f 60       	ori	r24, 0x0F	; 15
 4e2:	87 b9       	out	0x07, r24	; 7
		
	sei();
 4e4:	78 94       	sei
				if(nextState == 1){
					nextState = 0;
					OCR2A = 0;
					state = HITMISS;
					break;
					}else {state = BLOCKSHOT;}
 4e6:	88 e0       	ldi	r24, 0x08	; 8
 4e8:	38 2e       	mov	r3, r24
		//		PORTB &= ~(1<<PB5);
				uartSendc(4);
				if(nextState == 1){
					nextState = 0;
					OCR2A = 0;
					state = HITMISS;
 4ea:	c5 e0       	ldi	r28, 0x05	; 5
					OCR2A = 200;
					//Reverse direction of motor
					PORTB &= ~(1<<PB5);
					state = BLOCKSHOT;
					break;
					}else {state = TRACKBALL;}
 4ec:	07 e0       	ldi	r16, 0x07	; 7
				uartSendc(3);
				if(nextState == 1){
					nextState = 0;
					//spin backwards & loop to HITMISS
					//set to low speed
					OCR2A = 200;
 4ee:	d8 ec       	ldi	r29, 0xC8	; 200
				if(nextState == 1){
					nextState = 0;
					OCR2A = 0;
					state = TRACKBALL;
					break;
					}else {state = ERRORCORRECTION;}
 4f0:	16 e0       	ldi	r17, 0x06	; 6
	ki = Ki * SampleTimeInSec;
	kd = Kd / SampleTimeInSec;
	
	if(controllerDirection ==REVERSE)
	{
		kp = (0 - kp);
 4f2:	41 2c       	mov	r4, r1
 4f4:	51 2c       	mov	r5, r1
 4f6:	90 ec       	ldi	r25, 0xC0	; 192
 4f8:	69 2e       	mov	r6, r25
 4fa:	76 2c       	mov	r7, r6
		
	sei();
	
    while(1)
	    {
		switch(state){
 4fc:	e0 91 61 02 	lds	r30, 0x0261
 500:	f0 e0       	ldi	r31, 0x00	; 0
 502:	e9 30       	cpi	r30, 0x09	; 9
 504:	f1 05       	cpc	r31, r1
 506:	e8 f7       	brcc	.-6      	; 0x502 <main+0x32>
 508:	ee 58       	subi	r30, 0x8E	; 142
 50a:	ff 4f       	sbci	r31, 0xFF	; 255
 50c:	fa c3       	rjmp	.+2036   	; 0xd02 <__tablejump2__>
			case INIT:
				uartInit();
 50e:	13 de       	rcall	.-986    	; 0x136 <uartInit>
				uartSends("Is it my turn?\nEnter '2' to start targeting mode\n");
 510:	82 e0       	ldi	r24, 0x02	; 2
 512:	92 e0       	ldi	r25, 0x02	; 2
 514:	4a de       	rcall	.-876    	; 0x1aa <uartSends>
 516:	53 c1       	rjmp	.+678    	; 0x7be <main+0x2ee>
				OCR2A = 0;
				state = HITMISS;
				break;
			
			case MYTURN:
				if(i >= 2){
 518:	80 91 54 02 	lds	r24, 0x0254
 51c:	82 30       	cpi	r24, 0x02	; 2
 51e:	40 f1       	brcs	.+80     	; 0x570 <main+0xa0>
					uartSendc(uartData[0]);
 520:	80 91 55 02 	lds	r24, 0x0255
 524:	3b de       	rcall	.-906    	; 0x19c <uartSendc>
					uartSendc(uartData[1]);
 526:	80 91 56 02 	lds	r24, 0x0256
 52a:	38 de       	rcall	.-912    	; 0x19c <uartSendc>
					if(uartData[0] == 1){
 52c:	80 91 55 02 	lds	r24, 0x0255
 530:	81 30       	cpi	r24, 0x01	; 1
 532:	21 f4       	brne	.+8      	; 0x53c <main+0x6c>
						OCR2A = uartData[1];
 534:	80 91 56 02 	lds	r24, 0x0256
 538:	80 93 b3 00 	sts	0x00B3, r24
						
						
					}				
					if(uartData[0] == 2){
 53c:	80 91 55 02 	lds	r24, 0x0255
 540:	82 30       	cpi	r24, 0x02	; 2
 542:	31 f4       	brne	.+12     	; 0x550 <main+0x80>
						uartSends("Test\n");
 544:	84 e3       	ldi	r24, 0x34	; 52
 546:	92 e0       	ldi	r25, 0x02	; 2
 548:	30 de       	rcall	.-928    	; 0x1aa <uartSends>
						rampMotorSpeed(uartData[1]);
 54a:	80 91 56 02 	lds	r24, 0x0256
 54e:	38 de       	rcall	.-912    	; 0x1c0 <rampMotorSpeed>
//						PORTB ^= (1<<PB5);
					}
					if(uartData[0] == 3){
 550:	80 91 55 02 	lds	r24, 0x0255
 554:	83 30       	cpi	r24, 0x03	; 3
 556:	31 f4       	brne	.+12     	; 0x564 <main+0x94>
						uartSends("To IDCUP\n");
 558:	8a e3       	ldi	r24, 0x3A	; 58
 55a:	92 e0       	ldi	r25, 0x02	; 2
 55c:	26 de       	rcall	.-948    	; 0x1aa <uartSends>
						PORTB &= ~(1<<PB7);
 55e:	2f 98       	cbi	0x05, 7	; 5
						state = IDCUP;
 560:	82 e0       	ldi	r24, 0x02	; 2
 562:	13 c0       	rjmp	.+38     	; 0x58a <main+0xba>
						break;
					} else {state = MYTURN;}
 564:	81 e0       	ldi	r24, 0x01	; 1
 566:	80 93 61 02 	sts	0x0261, r24
//					uartPacketReady = false; 
					i = 0;
 56a:	10 92 54 02 	sts	0x0254, r1
 56e:	03 c0       	rjmp	.+6      	; 0x576 <main+0xa6>
				}else {state = MYTURN;}
 570:	81 e0       	ldi	r24, 0x01	; 1
 572:	80 93 61 02 	sts	0x0261, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 576:	2f ef       	ldi	r18, 0xFF	; 255
 578:	84 e3       	ldi	r24, 0x34	; 52
 57a:	9c e0       	ldi	r25, 0x0C	; 12
 57c:	21 50       	subi	r18, 0x01	; 1
 57e:	80 40       	sbci	r24, 0x00	; 0
 580:	90 40       	sbci	r25, 0x00	; 0
 582:	e1 f7       	brne	.-8      	; 0x57c <main+0xac>
 584:	00 c0       	rjmp	.+0      	; 0x586 <main+0xb6>
 586:	00 00       	nop
//				uartSendc(255);
				_delay_ms(250);
				state = MYTURN; 
 588:	81 e0       	ldi	r24, 0x01	; 1
 58a:	80 93 61 02 	sts	0x0261, r24
				break;
 58e:	b6 cf       	rjmp	.-148    	; 0x4fc <main+0x2c>
			
			case IDCUP:
				uartSends("In IDCUP\n");
 590:	84 e4       	ldi	r24, 0x44	; 68
 592:	92 e0       	ldi	r25, 0x02	; 2
 594:	0a de       	rcall	.-1004   	; 0x1aa <uartSends>
				state = TAKEAIM;
 596:	83 e0       	ldi	r24, 0x03	; 3
 598:	f8 cf       	rjmp	.-16     	; 0x58a <main+0xba>
				break;
				
			case TAKEAIM:
				//Turn on PID and start setting it
				//Allow PID to automatically control settings
				PIDsetMode(AUTOMATIC);
 59a:	81 e0       	ldi	r24, 0x01	; 1
 59c:	90 e0       	ldi	r25, 0x00	; 0
 59e:	88 df       	rcall	.-240    	; 0x4b0 <PIDsetMode>
	inAuto = newAuto;
}

void PIDsetControllerDirection(int Direction)
{
	controllerDirection = Direction;
 5a0:	10 92 51 02 	sts	0x0251, r1
 5a4:	10 92 50 02 	sts	0x0250, r1
				//Allow PID to automatically control settings
				PIDsetMode(AUTOMATIC);
				//Positive proportional control
				PIDsetControllerDirection(DIRECT);
				//set sample time in ms - should be handled in interrupt?
				PIDsetSampleTime(50);
 5a8:	82 e3       	ldi	r24, 0x32	; 50
 5aa:	90 e0       	ldi	r25, 0x00	; 0
 5ac:	ae de       	rcall	.-676    	; 0x30a <PIDsetSampleTime>
				//Minimum and Maximum output values
				PIDsetOutputLimits(0,255);
 5ae:	20 e0       	ldi	r18, 0x00	; 0
 5b0:	30 e0       	ldi	r19, 0x00	; 0
 5b2:	4f e7       	ldi	r20, 0x7F	; 127
 5b4:	53 e4       	ldi	r21, 0x43	; 67
 5b6:	60 e0       	ldi	r22, 0x00	; 0
 5b8:	70 e0       	ldi	r23, 0x00	; 0
 5ba:	cb 01       	movw	r24, r22
 5bc:	fa de       	rcall	.-524    	; 0x3b2 <PIDsetOutputLimits>

void PIDsetTunings(double Kp, double Ki, double Kd)
{
	if (Kp<0 || Ki<0|| Kd<0) return;
	
	double SampleTimeInSec = ((double)SampleTime)/1000;
 5be:	60 91 00 02 	lds	r22, 0x0200
 5c2:	70 91 01 02 	lds	r23, 0x0201
 5c6:	88 27       	eor	r24, r24
 5c8:	77 fd       	sbrc	r23, 7
 5ca:	80 95       	com	r24
 5cc:	98 2f       	mov	r25, r24
 5ce:	82 d2       	rcall	.+1284   	; 0xad4 <__floatsisf>
 5d0:	20 e0       	ldi	r18, 0x00	; 0
 5d2:	30 e0       	ldi	r19, 0x00	; 0
 5d4:	4a e7       	ldi	r20, 0x7A	; 122
 5d6:	54 e4       	ldi	r21, 0x44	; 68
 5d8:	13 d2       	rcall	.+1062   	; 0xa00 <__divsf3>
 5da:	6b 01       	movw	r12, r22
 5dc:	7c 01       	movw	r14, r24
	kp = Kp;
 5de:	80 e0       	ldi	r24, 0x00	; 0
 5e0:	90 e0       	ldi	r25, 0x00	; 0
 5e2:	a0 ec       	ldi	r26, 0xC0	; 192
 5e4:	b0 e4       	ldi	r27, 0x40	; 64
 5e6:	80 93 98 02 	sts	0x0298, r24
 5ea:	90 93 99 02 	sts	0x0299, r25
 5ee:	a0 93 9a 02 	sts	0x029A, r26
 5f2:	b0 93 9b 02 	sts	0x029B, r27
	ki = Ki * SampleTimeInSec;
 5f6:	2a e9       	ldi	r18, 0x9A	; 154
 5f8:	39 e9       	ldi	r19, 0x99	; 153
 5fa:	49 e1       	ldi	r20, 0x19	; 25
 5fc:	5f e3       	ldi	r21, 0x3F	; 63
 5fe:	c7 01       	movw	r24, r14
 600:	b6 01       	movw	r22, r12
 602:	1c d3       	rcall	.+1592   	; 0xc3c <__mulsf3>
 604:	4b 01       	movw	r8, r22
 606:	5c 01       	movw	r10, r24
 608:	60 93 84 02 	sts	0x0284, r22
 60c:	70 93 85 02 	sts	0x0285, r23
 610:	80 93 86 02 	sts	0x0286, r24
 614:	90 93 87 02 	sts	0x0287, r25
	kd = Kd / SampleTimeInSec;
 618:	a7 01       	movw	r20, r14
 61a:	96 01       	movw	r18, r12
 61c:	6a e9       	ldi	r22, 0x9A	; 154
 61e:	79 e9       	ldi	r23, 0x99	; 153
 620:	89 e1       	ldi	r24, 0x19	; 25
 622:	9f e3       	ldi	r25, 0x3F	; 63
 624:	ed d1       	rcall	.+986    	; 0xa00 <__divsf3>
 626:	6b 01       	movw	r12, r22
 628:	7c 01       	movw	r14, r24
 62a:	60 93 62 02 	sts	0x0262, r22
 62e:	70 93 63 02 	sts	0x0263, r23
 632:	80 93 64 02 	sts	0x0264, r24
 636:	90 93 65 02 	sts	0x0265, r25
	
	if(controllerDirection ==REVERSE)
 63a:	80 91 50 02 	lds	r24, 0x0250
 63e:	90 91 51 02 	lds	r25, 0x0251
 642:	01 97       	sbiw	r24, 0x01	; 1
 644:	21 f5       	brne	.+72     	; 0x68e <main+0x1be>
	{
		kp = (0 - kp);
 646:	40 92 98 02 	sts	0x0298, r4
 64a:	50 92 99 02 	sts	0x0299, r5
 64e:	60 92 9a 02 	sts	0x029A, r6
 652:	70 92 9b 02 	sts	0x029B, r7
		ki = (0 - ki);
 656:	a5 01       	movw	r20, r10
 658:	94 01       	movw	r18, r8
 65a:	60 e0       	ldi	r22, 0x00	; 0
 65c:	70 e0       	ldi	r23, 0x00	; 0
 65e:	cb 01       	movw	r24, r22
 660:	66 d1       	rcall	.+716    	; 0x92e <__subsf3>
 662:	60 93 84 02 	sts	0x0284, r22
 666:	70 93 85 02 	sts	0x0285, r23
 66a:	80 93 86 02 	sts	0x0286, r24
 66e:	90 93 87 02 	sts	0x0287, r25
		kd = (0 - kd);
 672:	a7 01       	movw	r20, r14
 674:	96 01       	movw	r18, r12
 676:	60 e0       	ldi	r22, 0x00	; 0
 678:	70 e0       	ldi	r23, 0x00	; 0
 67a:	cb 01       	movw	r24, r22
 67c:	58 d1       	rcall	.+688    	; 0x92e <__subsf3>
 67e:	60 93 62 02 	sts	0x0262, r22
 682:	70 93 63 02 	sts	0x0263, r23
 686:	80 93 64 02 	sts	0x0264, r24
 68a:	90 93 65 02 	sts	0x0265, r25
				//Minimum and Maximum output values
				PIDsetOutputLimits(0,255);
				//Set PID params (Kp, Ki, Kd)
				PIDsetTunings(6,0.6,0.6);
				//Start controller
				PIDinitialize();			
 68e:	e6 dd       	rcall	.-1076   	; 0x25c <PIDinitialize>
				//Set Setpoint to 0 RPM
				Setpoint = 0;
 690:	10 92 6e 02 	sts	0x026E, r1
 694:	10 92 6f 02 	sts	0x026F, r1
 698:	10 92 70 02 	sts	0x0270, r1
 69c:	10 92 71 02 	sts	0x0271, r1
 6a0:	36 c0       	rjmp	.+108    	; 0x70e <main+0x23e>
				//Write print tachometer output
				//Number of cycles divided by (16000000/1024)
//				RPM = 60/(timeStamp/ 15625);
//				uartSendc(rotation);

				if(i >= 2){
 6a2:	80 91 54 02 	lds	r24, 0x0254
 6a6:	82 30       	cpi	r24, 0x02	; 2
 6a8:	30 f1       	brcs	.+76     	; 0x6f6 <main+0x226>
					if(uartData[0] == 1){
 6aa:	f0 90 55 02 	lds	r15, 0x0255
 6ae:	91 e0       	ldi	r25, 0x01	; 1
 6b0:	f9 12       	cpse	r15, r25
 6b2:	06 c0       	rjmp	.+12     	; 0x6c0 <main+0x1f0>
						//go back to beginning
						PIDsetMode(MANUAL);
 6b4:	80 e0       	ldi	r24, 0x00	; 0
 6b6:	90 e0       	ldi	r25, 0x00	; 0
 6b8:	fb de       	rcall	.-522    	; 0x4b0 <PIDsetMode>
						state = MYTURN;
 6ba:	f0 92 61 02 	sts	0x0261, r15
						break;
 6be:	1e cf       	rjmp	.-452    	; 0x4fc <main+0x2c>
					}
					if(uartData[0] == 3){
 6c0:	80 91 55 02 	lds	r24, 0x0255
 6c4:	83 30       	cpi	r24, 0x03	; 3
 6c6:	a1 f4       	brne	.+40     	; 0x6f0 <main+0x220>
						uartSendc(uartData[1]);
 6c8:	80 91 56 02 	lds	r24, 0x0256
 6cc:	67 dd       	rcall	.-1330   	; 0x19c <uartSendc>
						//byte 1 is setpoint
						Setpoint = (uartData[1]);
 6ce:	f0 90 56 02 	lds	r15, 0x0256
 6d2:	6f 2d       	mov	r22, r15
 6d4:	70 e0       	ldi	r23, 0x00	; 0
 6d6:	80 e0       	ldi	r24, 0x00	; 0
 6d8:	90 e0       	ldi	r25, 0x00	; 0
 6da:	fa d1       	rcall	.+1012   	; 0xad0 <__floatunsisf>
 6dc:	60 93 6e 02 	sts	0x026E, r22
 6e0:	70 93 6f 02 	sts	0x026F, r23
 6e4:	80 93 70 02 	sts	0x0270, r24
 6e8:	90 93 71 02 	sts	0x0271, r25
						uartSendc((uint8_t)Setpoint);
 6ec:	8f 2d       	mov	r24, r15
 6ee:	56 dd       	rcall	.-1364   	; 0x19c <uartSendc>
					}
					i = 0;
 6f0:	10 92 54 02 	sts	0x0254, r1
 6f4:	03 c0       	rjmp	.+6      	; 0x6fc <main+0x22c>
				}else {	state = LAUNCHBALL;}
 6f6:	84 e0       	ldi	r24, 0x04	; 4
 6f8:	80 93 61 02 	sts	0x0261, r24
 6fc:	af ef       	ldi	r26, 0xFF	; 255
 6fe:	b1 ee       	ldi	r27, 0xE1	; 225
 700:	24 e0       	ldi	r18, 0x04	; 4
 702:	a1 50       	subi	r26, 0x01	; 1
 704:	b0 40       	sbci	r27, 0x00	; 0
 706:	20 40       	sbci	r18, 0x00	; 0
 708:	e1 f7       	brne	.-8      	; 0x702 <main+0x232>
 70a:	00 c0       	rjmp	.+0      	; 0x70c <main+0x23c>
 70c:	00 00       	nop
				_delay_ms(100);
				state = LAUNCHBALL;
 70e:	84 e0       	ldi	r24, 0x04	; 4
 710:	3c cf       	rjmp	.-392    	; 0x58a <main+0xba>
 712:	8f ef       	ldi	r24, 0xFF	; 255
 714:	91 ee       	ldi	r25, 0xE1	; 225
 716:	a4 e0       	ldi	r26, 0x04	; 4
 718:	81 50       	subi	r24, 0x01	; 1
 71a:	90 40       	sbci	r25, 0x00	; 0
 71c:	a0 40       	sbci	r26, 0x00	; 0
 71e:	e1 f7       	brne	.-8      	; 0x718 <main+0x248>
 720:	00 c0       	rjmp	.+0      	; 0x722 <main+0x252>
 722:	00 00       	nop
			case HITMISS:
				//Do nothing
				_delay_ms(100);
				//stop the motors
		//		OCR2A = 0; 
				uartSendc(1);
 724:	81 e0       	ldi	r24, 0x01	; 1
 726:	3a dd       	rcall	.-1420   	; 0x19c <uartSendc>
				if(nextState == 1){		
 728:	80 91 60 02 	lds	r24, 0x0260
 72c:	88 23       	and	r24, r24
 72e:	09 f4       	brne	.+2      	; 0x732 <main+0x262>
 730:	48 c0       	rjmp	.+144    	; 0x7c2 <main+0x2f2>
					nextState = 0;
 732:	10 92 60 02 	sts	0x0260, r1
					//spin motor forward
					//PWM output is on pin 10
					OCR2A = 200;
 736:	d0 93 b3 00 	sts	0x00B3, r29
					//PB5 (pin 11) is direction control
					PORTB |= (1<<PB5);
 73a:	2d 9a       	sbi	0x05, 5	; 5
 73c:	14 c0       	rjmp	.+40     	; 0x766 <main+0x296>
 73e:	bf ef       	ldi	r27, 0xFF	; 255
 740:	21 ee       	ldi	r18, 0xE1	; 225
 742:	84 e0       	ldi	r24, 0x04	; 4
 744:	b1 50       	subi	r27, 0x01	; 1
 746:	20 40       	sbci	r18, 0x00	; 0
 748:	80 40       	sbci	r24, 0x00	; 0
 74a:	e1 f7       	brne	.-8      	; 0x744 <main+0x274>
 74c:	00 c0       	rjmp	.+0      	; 0x74e <main+0x27e>
 74e:	00 00       	nop
				//spin motor forward
				//PWM output is on pin 10
//				OCR2A = 150;
				//PB5 (pin 11) is direction control
//				PORTB |= (1<<PB5);
				uartSendc(2);
 750:	82 e0       	ldi	r24, 0x02	; 2
 752:	24 dd       	rcall	.-1464   	; 0x19c <uartSendc>
				if(nextState == 1){
 754:	80 91 60 02 	lds	r24, 0x0260
 758:	88 23       	and	r24, r24
 75a:	29 f0       	breq	.+10     	; 0x766 <main+0x296>
					nextState = 0;
 75c:	10 92 60 02 	sts	0x0260, r1
					OCR2A = 0;
 760:	10 92 b3 00 	sts	0x00B3, r1
 764:	18 c0       	rjmp	.+48     	; 0x796 <main+0x2c6>
					state = TRACKBALL;
					break;
					}else {state = ERRORCORRECTION;}
 766:	10 93 61 02 	sts	0x0261, r17
				break;
 76a:	c8 ce       	rjmp	.-624    	; 0x4fc <main+0x2c>
 76c:	9f ef       	ldi	r25, 0xFF	; 255
 76e:	a1 ee       	ldi	r26, 0xE1	; 225
 770:	b4 e0       	ldi	r27, 0x04	; 4
 772:	91 50       	subi	r25, 0x01	; 1
 774:	a0 40       	sbci	r26, 0x00	; 0
 776:	b0 40       	sbci	r27, 0x00	; 0
 778:	e1 f7       	brne	.-8      	; 0x772 <main+0x2a2>
 77a:	00 c0       	rjmp	.+0      	; 0x77c <main+0x2ac>
 77c:	00 00       	nop
			case TRACKBALL:
				//do nothing
				_delay_ms(100);
				//stop motors
			//	OCR2A = 0;
				uartSendc(3);
 77e:	83 e0       	ldi	r24, 0x03	; 3
 780:	0d dd       	rcall	.-1510   	; 0x19c <uartSendc>
				if(nextState == 1){
 782:	80 91 60 02 	lds	r24, 0x0260
 786:	88 23       	and	r24, r24
 788:	31 f0       	breq	.+12     	; 0x796 <main+0x2c6>
					nextState = 0;
 78a:	10 92 60 02 	sts	0x0260, r1
					//spin backwards & loop to HITMISS
					//set to low speed
					OCR2A = 200;
 78e:	d0 93 b3 00 	sts	0x00B3, r29
					//Reverse direction of motor
					PORTB &= ~(1<<PB5);
 792:	2d 98       	cbi	0x05, 5	; 5
 794:	19 c0       	rjmp	.+50     	; 0x7c8 <main+0x2f8>
					state = BLOCKSHOT;
					break;
					}else {state = TRACKBALL;}
 796:	00 93 61 02 	sts	0x0261, r16
				break;
 79a:	b0 ce       	rjmp	.-672    	; 0x4fc <main+0x2c>
 79c:	2f ef       	ldi	r18, 0xFF	; 255
 79e:	81 ee       	ldi	r24, 0xE1	; 225
 7a0:	94 e0       	ldi	r25, 0x04	; 4
 7a2:	21 50       	subi	r18, 0x01	; 1
 7a4:	80 40       	sbci	r24, 0x00	; 0
 7a6:	90 40       	sbci	r25, 0x00	; 0
 7a8:	e1 f7       	brne	.-8      	; 0x7a2 <main+0x2d2>
 7aa:	00 c0       	rjmp	.+0      	; 0x7ac <main+0x2dc>
 7ac:	00 00       	nop
				//spin backwards & loop to HITMISS
				//set to low speed 
		//		OCR2A = 150;
				//Reverse direction of motor
		//		PORTB &= ~(1<<PB5);
				uartSendc(4);
 7ae:	84 e0       	ldi	r24, 0x04	; 4
 7b0:	f5 dc       	rcall	.-1558   	; 0x19c <uartSendc>
				if(nextState == 1){
 7b2:	80 91 60 02 	lds	r24, 0x0260
 7b6:	88 23       	and	r24, r24
 7b8:	39 f0       	breq	.+14     	; 0x7c8 <main+0x2f8>
					nextState = 0;
 7ba:	10 92 60 02 	sts	0x0260, r1
					OCR2A = 0;
 7be:	10 92 b3 00 	sts	0x00B3, r1
					state = HITMISS;
 7c2:	c0 93 61 02 	sts	0x0261, r28
					break;
 7c6:	9a ce       	rjmp	.-716    	; 0x4fc <main+0x2c>
					}else {state = BLOCKSHOT;}
 7c8:	30 92 61 02 	sts	0x0261, r3
				break;
 7cc:	97 ce       	rjmp	.-722    	; 0x4fc <main+0x2c>

000007ce <__vector_23>:
		}
    }
}


ISR(TIMER0_OVF_vect){
 7ce:	1f 92       	push	r1
 7d0:	0f 92       	push	r0
 7d2:	0f b6       	in	r0, 0x3f	; 63
 7d4:	0f 92       	push	r0
 7d6:	11 24       	eor	r1, r1
 7d8:	0b b6       	in	r0, 0x3b	; 59
 7da:	0f 92       	push	r0
 7dc:	2f 93       	push	r18
 7de:	3f 93       	push	r19
 7e0:	4f 93       	push	r20
 7e2:	5f 93       	push	r21
 7e4:	6f 93       	push	r22
 7e6:	7f 93       	push	r23
 7e8:	8f 93       	push	r24
 7ea:	9f 93       	push	r25
 7ec:	af 93       	push	r26
 7ee:	bf 93       	push	r27
 7f0:	ef 93       	push	r30
 7f2:	ff 93       	push	r31
	//60 ticks is a second. 6 is a .1 sec
	//only send speed once a second.
	if(tick == 60){
 7f4:	80 91 83 02 	lds	r24, 0x0283
 7f8:	8c 33       	cpi	r24, 0x3C	; 60
 7fa:	19 f4       	brne	.+6      	; 0x802 <__vector_23+0x34>
		uartSendc(rotation);
 7fc:	80 91 5c 02 	lds	r24, 0x025C
 800:	cd dc       	rcall	.-1638   	; 0x19c <uartSendc>
	}
	//12 ticks is 200ms. This gives 300 RPM minimum or 5 RPS
	if(tick == 12){
 802:	80 91 83 02 	lds	r24, 0x0283
 806:	8c 30       	cpi	r24, 0x0C	; 12
 808:	51 f5       	brne	.+84     	; 0x85e <__vector_23+0x90>
		tick = 0;
 80a:	10 92 83 02 	sts	0x0283, r1
		//rotations/200ms * 1000ms/1s * 60s/min
		RPM = rotation * 300; 
 80e:	80 91 5c 02 	lds	r24, 0x025C
 812:	90 91 5d 02 	lds	r25, 0x025D
 816:	a0 91 5e 02 	lds	r26, 0x025E
 81a:	b0 91 5f 02 	lds	r27, 0x025F
 81e:	4c e2       	ldi	r20, 0x2C	; 44
 820:	51 e0       	ldi	r21, 0x01	; 1
 822:	84 9f       	mul	r24, r20
 824:	90 01       	movw	r18, r0
 826:	85 9f       	mul	r24, r21
 828:	30 0d       	add	r19, r0
 82a:	94 9f       	mul	r25, r20
 82c:	30 0d       	add	r19, r0
 82e:	11 24       	eor	r1, r1
 830:	30 93 7a 02 	sts	0x027A, r19
 834:	20 93 79 02 	sts	0x0279, r18
		lastRotation = rotation;
 838:	80 93 58 02 	sts	0x0258, r24
 83c:	90 93 59 02 	sts	0x0259, r25
 840:	a0 93 5a 02 	sts	0x025A, r26
 844:	b0 93 5b 02 	sts	0x025B, r27
//			PIDinput = (rotation);
//			PIDcompute();
//		}
		//its been 1s check the counter
//		uartSendc((uint8_t)PIDoutput);
		rotation = 0;
 848:	10 92 5c 02 	sts	0x025C, r1
 84c:	10 92 5d 02 	sts	0x025D, r1
 850:	10 92 5e 02 	sts	0x025E, r1
 854:	10 92 5f 02 	sts	0x025F, r1
		rotationUpdated = 1;
 858:	81 e0       	ldi	r24, 0x01	; 1
 85a:	80 93 57 02 	sts	0x0257, r24
		//(Rotation/50ms) * (1000ms/sec) * (60sec/min) = RPM - not correct anymore
		PIDinput = (rotation);
		PIDcompute();
	}
	*/
	tick++;
 85e:	80 91 83 02 	lds	r24, 0x0283
 862:	8f 5f       	subi	r24, 0xFF	; 255
 864:	80 93 83 02 	sts	0x0283, r24
}
 868:	ff 91       	pop	r31
 86a:	ef 91       	pop	r30
 86c:	bf 91       	pop	r27
 86e:	af 91       	pop	r26
 870:	9f 91       	pop	r25
 872:	8f 91       	pop	r24
 874:	7f 91       	pop	r23
 876:	6f 91       	pop	r22
 878:	5f 91       	pop	r21
 87a:	4f 91       	pop	r20
 87c:	3f 91       	pop	r19
 87e:	2f 91       	pop	r18
 880:	0f 90       	pop	r0
 882:	0b be       	out	0x3b, r0	; 59
 884:	0f 90       	pop	r0
 886:	0f be       	out	0x3f, r0	; 63
 888:	0f 90       	pop	r0
 88a:	1f 90       	pop	r1
 88c:	18 95       	reti

0000088e <__vector_5>:

ISR(INT4_vect){
 88e:	1f 92       	push	r1
 890:	0f 92       	push	r0
 892:	0f b6       	in	r0, 0x3f	; 63
 894:	0f 92       	push	r0
 896:	11 24       	eor	r1, r1
 898:	8f 93       	push	r24
 89a:	9f 93       	push	r25
 89c:	af 93       	push	r26
 89e:	bf 93       	push	r27
	rotation++;
 8a0:	80 91 5c 02 	lds	r24, 0x025C
 8a4:	90 91 5d 02 	lds	r25, 0x025D
 8a8:	a0 91 5e 02 	lds	r26, 0x025E
 8ac:	b0 91 5f 02 	lds	r27, 0x025F
 8b0:	01 96       	adiw	r24, 0x01	; 1
 8b2:	a1 1d       	adc	r26, r1
 8b4:	b1 1d       	adc	r27, r1
 8b6:	80 93 5c 02 	sts	0x025C, r24
 8ba:	90 93 5d 02 	sts	0x025D, r25
 8be:	a0 93 5e 02 	sts	0x025E, r26
 8c2:	b0 93 5f 02 	sts	0x025F, r27
	nextState = 1; 
 8c6:	81 e0       	ldi	r24, 0x01	; 1
 8c8:	80 93 60 02 	sts	0x0260, r24
//	PORTB ^= (1<<PB7);
//	_delay_ms(1);
}
 8cc:	bf 91       	pop	r27
 8ce:	af 91       	pop	r26
 8d0:	9f 91       	pop	r25
 8d2:	8f 91       	pop	r24
 8d4:	0f 90       	pop	r0
 8d6:	0f be       	out	0x3f, r0	; 63
 8d8:	0f 90       	pop	r0
 8da:	1f 90       	pop	r1
 8dc:	18 95       	reti

000008de <__vector_25>:

ISR(USART0_RX_vect){
 8de:	1f 92       	push	r1
 8e0:	0f 92       	push	r0
 8e2:	0f b6       	in	r0, 0x3f	; 63
 8e4:	0f 92       	push	r0
 8e6:	11 24       	eor	r1, r1
 8e8:	0b b6       	in	r0, 0x3b	; 59
 8ea:	0f 92       	push	r0
 8ec:	8f 93       	push	r24
 8ee:	ef 93       	push	r30
 8f0:	ff 93       	push	r31
//	receivedByte = UDR0;
//	UDR0 = receivedByte;
	uartData[i] = UDR0;
 8f2:	e0 91 54 02 	lds	r30, 0x0254
 8f6:	f0 e0       	ldi	r31, 0x00	; 0
 8f8:	80 91 c6 00 	lds	r24, 0x00C6
 8fc:	eb 5a       	subi	r30, 0xAB	; 171
 8fe:	fd 4f       	sbci	r31, 0xFD	; 253
 900:	80 83       	st	Z, r24
//	uartSendc(255);
	i++;
 902:	80 91 54 02 	lds	r24, 0x0254
 906:	8f 5f       	subi	r24, 0xFF	; 255
 908:	80 93 54 02 	sts	0x0254, r24
	if(i >= 2){
 90c:	80 91 54 02 	lds	r24, 0x0254
 910:	82 30       	cpi	r24, 0x02	; 2
 912:	18 f0       	brcs	.+6      	; 0x91a <__vector_25+0x3c>
		uartPacketReady = true;
 914:	81 e0       	ldi	r24, 0x01	; 1
 916:	80 93 53 02 	sts	0x0253, r24
	}
//	OCR2A = UDR0;
}
 91a:	ff 91       	pop	r31
 91c:	ef 91       	pop	r30
 91e:	8f 91       	pop	r24
 920:	0f 90       	pop	r0
 922:	0b be       	out	0x3b, r0	; 59
 924:	0f 90       	pop	r0
 926:	0f be       	out	0x3f, r0	; 63
 928:	0f 90       	pop	r0
 92a:	1f 90       	pop	r1
 92c:	18 95       	reti

0000092e <__subsf3>:
 92e:	50 58       	subi	r21, 0x80	; 128

00000930 <__addsf3>:
 930:	bb 27       	eor	r27, r27
 932:	aa 27       	eor	r26, r26
 934:	0e d0       	rcall	.+28     	; 0x952 <__addsf3x>
 936:	44 c1       	rjmp	.+648    	; 0xbc0 <__fp_round>
 938:	35 d1       	rcall	.+618    	; 0xba4 <__fp_pscA>
 93a:	30 f0       	brcs	.+12     	; 0x948 <__addsf3+0x18>
 93c:	3a d1       	rcall	.+628    	; 0xbb2 <__fp_pscB>
 93e:	20 f0       	brcs	.+8      	; 0x948 <__addsf3+0x18>
 940:	31 f4       	brne	.+12     	; 0x94e <__addsf3+0x1e>
 942:	9f 3f       	cpi	r25, 0xFF	; 255
 944:	11 f4       	brne	.+4      	; 0x94a <__addsf3+0x1a>
 946:	1e f4       	brtc	.+6      	; 0x94e <__addsf3+0x1e>
 948:	2a c1       	rjmp	.+596    	; 0xb9e <__fp_nan>
 94a:	0e f4       	brtc	.+2      	; 0x94e <__addsf3+0x1e>
 94c:	e0 95       	com	r30
 94e:	e7 fb       	bst	r30, 7
 950:	20 c1       	rjmp	.+576    	; 0xb92 <__fp_inf>

00000952 <__addsf3x>:
 952:	e9 2f       	mov	r30, r25
 954:	46 d1       	rcall	.+652    	; 0xbe2 <__fp_split3>
 956:	80 f3       	brcs	.-32     	; 0x938 <__addsf3+0x8>
 958:	ba 17       	cp	r27, r26
 95a:	62 07       	cpc	r22, r18
 95c:	73 07       	cpc	r23, r19
 95e:	84 07       	cpc	r24, r20
 960:	95 07       	cpc	r25, r21
 962:	18 f0       	brcs	.+6      	; 0x96a <__addsf3x+0x18>
 964:	71 f4       	brne	.+28     	; 0x982 <__addsf3x+0x30>
 966:	9e f5       	brtc	.+102    	; 0x9ce <__addsf3x+0x7c>
 968:	5e c1       	rjmp	.+700    	; 0xc26 <__fp_zero>
 96a:	0e f4       	brtc	.+2      	; 0x96e <__addsf3x+0x1c>
 96c:	e0 95       	com	r30
 96e:	0b 2e       	mov	r0, r27
 970:	ba 2f       	mov	r27, r26
 972:	a0 2d       	mov	r26, r0
 974:	0b 01       	movw	r0, r22
 976:	b9 01       	movw	r22, r18
 978:	90 01       	movw	r18, r0
 97a:	0c 01       	movw	r0, r24
 97c:	ca 01       	movw	r24, r20
 97e:	a0 01       	movw	r20, r0
 980:	11 24       	eor	r1, r1
 982:	ff 27       	eor	r31, r31
 984:	59 1b       	sub	r21, r25
 986:	99 f0       	breq	.+38     	; 0x9ae <__addsf3x+0x5c>
 988:	59 3f       	cpi	r21, 0xF9	; 249
 98a:	50 f4       	brcc	.+20     	; 0x9a0 <__addsf3x+0x4e>
 98c:	50 3e       	cpi	r21, 0xE0	; 224
 98e:	68 f1       	brcs	.+90     	; 0x9ea <__addsf3x+0x98>
 990:	1a 16       	cp	r1, r26
 992:	f0 40       	sbci	r31, 0x00	; 0
 994:	a2 2f       	mov	r26, r18
 996:	23 2f       	mov	r18, r19
 998:	34 2f       	mov	r19, r20
 99a:	44 27       	eor	r20, r20
 99c:	58 5f       	subi	r21, 0xF8	; 248
 99e:	f3 cf       	rjmp	.-26     	; 0x986 <__addsf3x+0x34>
 9a0:	46 95       	lsr	r20
 9a2:	37 95       	ror	r19
 9a4:	27 95       	ror	r18
 9a6:	a7 95       	ror	r26
 9a8:	f0 40       	sbci	r31, 0x00	; 0
 9aa:	53 95       	inc	r21
 9ac:	c9 f7       	brne	.-14     	; 0x9a0 <__addsf3x+0x4e>
 9ae:	7e f4       	brtc	.+30     	; 0x9ce <__addsf3x+0x7c>
 9b0:	1f 16       	cp	r1, r31
 9b2:	ba 0b       	sbc	r27, r26
 9b4:	62 0b       	sbc	r22, r18
 9b6:	73 0b       	sbc	r23, r19
 9b8:	84 0b       	sbc	r24, r20
 9ba:	ba f0       	brmi	.+46     	; 0x9ea <__addsf3x+0x98>
 9bc:	91 50       	subi	r25, 0x01	; 1
 9be:	a1 f0       	breq	.+40     	; 0x9e8 <__addsf3x+0x96>
 9c0:	ff 0f       	add	r31, r31
 9c2:	bb 1f       	adc	r27, r27
 9c4:	66 1f       	adc	r22, r22
 9c6:	77 1f       	adc	r23, r23
 9c8:	88 1f       	adc	r24, r24
 9ca:	c2 f7       	brpl	.-16     	; 0x9bc <__addsf3x+0x6a>
 9cc:	0e c0       	rjmp	.+28     	; 0x9ea <__addsf3x+0x98>
 9ce:	ba 0f       	add	r27, r26
 9d0:	62 1f       	adc	r22, r18
 9d2:	73 1f       	adc	r23, r19
 9d4:	84 1f       	adc	r24, r20
 9d6:	48 f4       	brcc	.+18     	; 0x9ea <__addsf3x+0x98>
 9d8:	87 95       	ror	r24
 9da:	77 95       	ror	r23
 9dc:	67 95       	ror	r22
 9de:	b7 95       	ror	r27
 9e0:	f7 95       	ror	r31
 9e2:	9e 3f       	cpi	r25, 0xFE	; 254
 9e4:	08 f0       	brcs	.+2      	; 0x9e8 <__addsf3x+0x96>
 9e6:	b3 cf       	rjmp	.-154    	; 0x94e <__addsf3+0x1e>
 9e8:	93 95       	inc	r25
 9ea:	88 0f       	add	r24, r24
 9ec:	08 f0       	brcs	.+2      	; 0x9f0 <__addsf3x+0x9e>
 9ee:	99 27       	eor	r25, r25
 9f0:	ee 0f       	add	r30, r30
 9f2:	97 95       	ror	r25
 9f4:	87 95       	ror	r24
 9f6:	08 95       	ret

000009f8 <__cmpsf2>:
 9f8:	a8 d0       	rcall	.+336    	; 0xb4a <__fp_cmp>
 9fa:	08 f4       	brcc	.+2      	; 0x9fe <__cmpsf2+0x6>
 9fc:	81 e0       	ldi	r24, 0x01	; 1
 9fe:	08 95       	ret

00000a00 <__divsf3>:
 a00:	0c d0       	rcall	.+24     	; 0xa1a <__divsf3x>
 a02:	de c0       	rjmp	.+444    	; 0xbc0 <__fp_round>
 a04:	d6 d0       	rcall	.+428    	; 0xbb2 <__fp_pscB>
 a06:	40 f0       	brcs	.+16     	; 0xa18 <__divsf3+0x18>
 a08:	cd d0       	rcall	.+410    	; 0xba4 <__fp_pscA>
 a0a:	30 f0       	brcs	.+12     	; 0xa18 <__divsf3+0x18>
 a0c:	21 f4       	brne	.+8      	; 0xa16 <__divsf3+0x16>
 a0e:	5f 3f       	cpi	r21, 0xFF	; 255
 a10:	19 f0       	breq	.+6      	; 0xa18 <__divsf3+0x18>
 a12:	bf c0       	rjmp	.+382    	; 0xb92 <__fp_inf>
 a14:	51 11       	cpse	r21, r1
 a16:	08 c1       	rjmp	.+528    	; 0xc28 <__fp_szero>
 a18:	c2 c0       	rjmp	.+388    	; 0xb9e <__fp_nan>

00000a1a <__divsf3x>:
 a1a:	e3 d0       	rcall	.+454    	; 0xbe2 <__fp_split3>
 a1c:	98 f3       	brcs	.-26     	; 0xa04 <__divsf3+0x4>

00000a1e <__divsf3_pse>:
 a1e:	99 23       	and	r25, r25
 a20:	c9 f3       	breq	.-14     	; 0xa14 <__divsf3+0x14>
 a22:	55 23       	and	r21, r21
 a24:	b1 f3       	breq	.-20     	; 0xa12 <__divsf3+0x12>
 a26:	95 1b       	sub	r25, r21
 a28:	55 0b       	sbc	r21, r21
 a2a:	bb 27       	eor	r27, r27
 a2c:	aa 27       	eor	r26, r26
 a2e:	62 17       	cp	r22, r18
 a30:	73 07       	cpc	r23, r19
 a32:	84 07       	cpc	r24, r20
 a34:	38 f0       	brcs	.+14     	; 0xa44 <__divsf3_pse+0x26>
 a36:	9f 5f       	subi	r25, 0xFF	; 255
 a38:	5f 4f       	sbci	r21, 0xFF	; 255
 a3a:	22 0f       	add	r18, r18
 a3c:	33 1f       	adc	r19, r19
 a3e:	44 1f       	adc	r20, r20
 a40:	aa 1f       	adc	r26, r26
 a42:	a9 f3       	breq	.-22     	; 0xa2e <__divsf3_pse+0x10>
 a44:	33 d0       	rcall	.+102    	; 0xaac <__divsf3_pse+0x8e>
 a46:	0e 2e       	mov	r0, r30
 a48:	3a f0       	brmi	.+14     	; 0xa58 <__divsf3_pse+0x3a>
 a4a:	e0 e8       	ldi	r30, 0x80	; 128
 a4c:	30 d0       	rcall	.+96     	; 0xaae <__divsf3_pse+0x90>
 a4e:	91 50       	subi	r25, 0x01	; 1
 a50:	50 40       	sbci	r21, 0x00	; 0
 a52:	e6 95       	lsr	r30
 a54:	00 1c       	adc	r0, r0
 a56:	ca f7       	brpl	.-14     	; 0xa4a <__divsf3_pse+0x2c>
 a58:	29 d0       	rcall	.+82     	; 0xaac <__divsf3_pse+0x8e>
 a5a:	fe 2f       	mov	r31, r30
 a5c:	27 d0       	rcall	.+78     	; 0xaac <__divsf3_pse+0x8e>
 a5e:	66 0f       	add	r22, r22
 a60:	77 1f       	adc	r23, r23
 a62:	88 1f       	adc	r24, r24
 a64:	bb 1f       	adc	r27, r27
 a66:	26 17       	cp	r18, r22
 a68:	37 07       	cpc	r19, r23
 a6a:	48 07       	cpc	r20, r24
 a6c:	ab 07       	cpc	r26, r27
 a6e:	b0 e8       	ldi	r27, 0x80	; 128
 a70:	09 f0       	breq	.+2      	; 0xa74 <__divsf3_pse+0x56>
 a72:	bb 0b       	sbc	r27, r27
 a74:	80 2d       	mov	r24, r0
 a76:	bf 01       	movw	r22, r30
 a78:	ff 27       	eor	r31, r31
 a7a:	93 58       	subi	r25, 0x83	; 131
 a7c:	5f 4f       	sbci	r21, 0xFF	; 255
 a7e:	2a f0       	brmi	.+10     	; 0xa8a <__divsf3_pse+0x6c>
 a80:	9e 3f       	cpi	r25, 0xFE	; 254
 a82:	51 05       	cpc	r21, r1
 a84:	68 f0       	brcs	.+26     	; 0xaa0 <__divsf3_pse+0x82>
 a86:	85 c0       	rjmp	.+266    	; 0xb92 <__fp_inf>
 a88:	cf c0       	rjmp	.+414    	; 0xc28 <__fp_szero>
 a8a:	5f 3f       	cpi	r21, 0xFF	; 255
 a8c:	ec f3       	brlt	.-6      	; 0xa88 <__divsf3_pse+0x6a>
 a8e:	98 3e       	cpi	r25, 0xE8	; 232
 a90:	dc f3       	brlt	.-10     	; 0xa88 <__divsf3_pse+0x6a>
 a92:	86 95       	lsr	r24
 a94:	77 95       	ror	r23
 a96:	67 95       	ror	r22
 a98:	b7 95       	ror	r27
 a9a:	f7 95       	ror	r31
 a9c:	9f 5f       	subi	r25, 0xFF	; 255
 a9e:	c9 f7       	brne	.-14     	; 0xa92 <__divsf3_pse+0x74>
 aa0:	88 0f       	add	r24, r24
 aa2:	91 1d       	adc	r25, r1
 aa4:	96 95       	lsr	r25
 aa6:	87 95       	ror	r24
 aa8:	97 f9       	bld	r25, 7
 aaa:	08 95       	ret
 aac:	e1 e0       	ldi	r30, 0x01	; 1
 aae:	66 0f       	add	r22, r22
 ab0:	77 1f       	adc	r23, r23
 ab2:	88 1f       	adc	r24, r24
 ab4:	bb 1f       	adc	r27, r27
 ab6:	62 17       	cp	r22, r18
 ab8:	73 07       	cpc	r23, r19
 aba:	84 07       	cpc	r24, r20
 abc:	ba 07       	cpc	r27, r26
 abe:	20 f0       	brcs	.+8      	; 0xac8 <__divsf3_pse+0xaa>
 ac0:	62 1b       	sub	r22, r18
 ac2:	73 0b       	sbc	r23, r19
 ac4:	84 0b       	sbc	r24, r20
 ac6:	ba 0b       	sbc	r27, r26
 ac8:	ee 1f       	adc	r30, r30
 aca:	88 f7       	brcc	.-30     	; 0xaae <__divsf3_pse+0x90>
 acc:	e0 95       	com	r30
 ace:	08 95       	ret

00000ad0 <__floatunsisf>:
 ad0:	e8 94       	clt
 ad2:	09 c0       	rjmp	.+18     	; 0xae6 <__floatsisf+0x12>

00000ad4 <__floatsisf>:
 ad4:	97 fb       	bst	r25, 7
 ad6:	3e f4       	brtc	.+14     	; 0xae6 <__floatsisf+0x12>
 ad8:	90 95       	com	r25
 ada:	80 95       	com	r24
 adc:	70 95       	com	r23
 ade:	61 95       	neg	r22
 ae0:	7f 4f       	sbci	r23, 0xFF	; 255
 ae2:	8f 4f       	sbci	r24, 0xFF	; 255
 ae4:	9f 4f       	sbci	r25, 0xFF	; 255
 ae6:	99 23       	and	r25, r25
 ae8:	a9 f0       	breq	.+42     	; 0xb14 <__floatsisf+0x40>
 aea:	f9 2f       	mov	r31, r25
 aec:	96 e9       	ldi	r25, 0x96	; 150
 aee:	bb 27       	eor	r27, r27
 af0:	93 95       	inc	r25
 af2:	f6 95       	lsr	r31
 af4:	87 95       	ror	r24
 af6:	77 95       	ror	r23
 af8:	67 95       	ror	r22
 afa:	b7 95       	ror	r27
 afc:	f1 11       	cpse	r31, r1
 afe:	f8 cf       	rjmp	.-16     	; 0xaf0 <__floatsisf+0x1c>
 b00:	fa f4       	brpl	.+62     	; 0xb40 <__floatsisf+0x6c>
 b02:	bb 0f       	add	r27, r27
 b04:	11 f4       	brne	.+4      	; 0xb0a <__floatsisf+0x36>
 b06:	60 ff       	sbrs	r22, 0
 b08:	1b c0       	rjmp	.+54     	; 0xb40 <__floatsisf+0x6c>
 b0a:	6f 5f       	subi	r22, 0xFF	; 255
 b0c:	7f 4f       	sbci	r23, 0xFF	; 255
 b0e:	8f 4f       	sbci	r24, 0xFF	; 255
 b10:	9f 4f       	sbci	r25, 0xFF	; 255
 b12:	16 c0       	rjmp	.+44     	; 0xb40 <__floatsisf+0x6c>
 b14:	88 23       	and	r24, r24
 b16:	11 f0       	breq	.+4      	; 0xb1c <__floatsisf+0x48>
 b18:	96 e9       	ldi	r25, 0x96	; 150
 b1a:	11 c0       	rjmp	.+34     	; 0xb3e <__floatsisf+0x6a>
 b1c:	77 23       	and	r23, r23
 b1e:	21 f0       	breq	.+8      	; 0xb28 <__floatsisf+0x54>
 b20:	9e e8       	ldi	r25, 0x8E	; 142
 b22:	87 2f       	mov	r24, r23
 b24:	76 2f       	mov	r23, r22
 b26:	05 c0       	rjmp	.+10     	; 0xb32 <__floatsisf+0x5e>
 b28:	66 23       	and	r22, r22
 b2a:	71 f0       	breq	.+28     	; 0xb48 <__floatsisf+0x74>
 b2c:	96 e8       	ldi	r25, 0x86	; 134
 b2e:	86 2f       	mov	r24, r22
 b30:	70 e0       	ldi	r23, 0x00	; 0
 b32:	60 e0       	ldi	r22, 0x00	; 0
 b34:	2a f0       	brmi	.+10     	; 0xb40 <__floatsisf+0x6c>
 b36:	9a 95       	dec	r25
 b38:	66 0f       	add	r22, r22
 b3a:	77 1f       	adc	r23, r23
 b3c:	88 1f       	adc	r24, r24
 b3e:	da f7       	brpl	.-10     	; 0xb36 <__floatsisf+0x62>
 b40:	88 0f       	add	r24, r24
 b42:	96 95       	lsr	r25
 b44:	87 95       	ror	r24
 b46:	97 f9       	bld	r25, 7
 b48:	08 95       	ret

00000b4a <__fp_cmp>:
 b4a:	99 0f       	add	r25, r25
 b4c:	00 08       	sbc	r0, r0
 b4e:	55 0f       	add	r21, r21
 b50:	aa 0b       	sbc	r26, r26
 b52:	e0 e8       	ldi	r30, 0x80	; 128
 b54:	fe ef       	ldi	r31, 0xFE	; 254
 b56:	16 16       	cp	r1, r22
 b58:	17 06       	cpc	r1, r23
 b5a:	e8 07       	cpc	r30, r24
 b5c:	f9 07       	cpc	r31, r25
 b5e:	c0 f0       	brcs	.+48     	; 0xb90 <__fp_cmp+0x46>
 b60:	12 16       	cp	r1, r18
 b62:	13 06       	cpc	r1, r19
 b64:	e4 07       	cpc	r30, r20
 b66:	f5 07       	cpc	r31, r21
 b68:	98 f0       	brcs	.+38     	; 0xb90 <__fp_cmp+0x46>
 b6a:	62 1b       	sub	r22, r18
 b6c:	73 0b       	sbc	r23, r19
 b6e:	84 0b       	sbc	r24, r20
 b70:	95 0b       	sbc	r25, r21
 b72:	39 f4       	brne	.+14     	; 0xb82 <__fp_cmp+0x38>
 b74:	0a 26       	eor	r0, r26
 b76:	61 f0       	breq	.+24     	; 0xb90 <__fp_cmp+0x46>
 b78:	23 2b       	or	r18, r19
 b7a:	24 2b       	or	r18, r20
 b7c:	25 2b       	or	r18, r21
 b7e:	21 f4       	brne	.+8      	; 0xb88 <__fp_cmp+0x3e>
 b80:	08 95       	ret
 b82:	0a 26       	eor	r0, r26
 b84:	09 f4       	brne	.+2      	; 0xb88 <__fp_cmp+0x3e>
 b86:	a1 40       	sbci	r26, 0x01	; 1
 b88:	a6 95       	lsr	r26
 b8a:	8f ef       	ldi	r24, 0xFF	; 255
 b8c:	81 1d       	adc	r24, r1
 b8e:	81 1d       	adc	r24, r1
 b90:	08 95       	ret

00000b92 <__fp_inf>:
 b92:	97 f9       	bld	r25, 7
 b94:	9f 67       	ori	r25, 0x7F	; 127
 b96:	80 e8       	ldi	r24, 0x80	; 128
 b98:	70 e0       	ldi	r23, 0x00	; 0
 b9a:	60 e0       	ldi	r22, 0x00	; 0
 b9c:	08 95       	ret

00000b9e <__fp_nan>:
 b9e:	9f ef       	ldi	r25, 0xFF	; 255
 ba0:	80 ec       	ldi	r24, 0xC0	; 192
 ba2:	08 95       	ret

00000ba4 <__fp_pscA>:
 ba4:	00 24       	eor	r0, r0
 ba6:	0a 94       	dec	r0
 ba8:	16 16       	cp	r1, r22
 baa:	17 06       	cpc	r1, r23
 bac:	18 06       	cpc	r1, r24
 bae:	09 06       	cpc	r0, r25
 bb0:	08 95       	ret

00000bb2 <__fp_pscB>:
 bb2:	00 24       	eor	r0, r0
 bb4:	0a 94       	dec	r0
 bb6:	12 16       	cp	r1, r18
 bb8:	13 06       	cpc	r1, r19
 bba:	14 06       	cpc	r1, r20
 bbc:	05 06       	cpc	r0, r21
 bbe:	08 95       	ret

00000bc0 <__fp_round>:
 bc0:	09 2e       	mov	r0, r25
 bc2:	03 94       	inc	r0
 bc4:	00 0c       	add	r0, r0
 bc6:	11 f4       	brne	.+4      	; 0xbcc <__fp_round+0xc>
 bc8:	88 23       	and	r24, r24
 bca:	52 f0       	brmi	.+20     	; 0xbe0 <__fp_round+0x20>
 bcc:	bb 0f       	add	r27, r27
 bce:	40 f4       	brcc	.+16     	; 0xbe0 <__fp_round+0x20>
 bd0:	bf 2b       	or	r27, r31
 bd2:	11 f4       	brne	.+4      	; 0xbd8 <__fp_round+0x18>
 bd4:	60 ff       	sbrs	r22, 0
 bd6:	04 c0       	rjmp	.+8      	; 0xbe0 <__fp_round+0x20>
 bd8:	6f 5f       	subi	r22, 0xFF	; 255
 bda:	7f 4f       	sbci	r23, 0xFF	; 255
 bdc:	8f 4f       	sbci	r24, 0xFF	; 255
 bde:	9f 4f       	sbci	r25, 0xFF	; 255
 be0:	08 95       	ret

00000be2 <__fp_split3>:
 be2:	57 fd       	sbrc	r21, 7
 be4:	90 58       	subi	r25, 0x80	; 128
 be6:	44 0f       	add	r20, r20
 be8:	55 1f       	adc	r21, r21
 bea:	59 f0       	breq	.+22     	; 0xc02 <__fp_splitA+0x10>
 bec:	5f 3f       	cpi	r21, 0xFF	; 255
 bee:	71 f0       	breq	.+28     	; 0xc0c <__fp_splitA+0x1a>
 bf0:	47 95       	ror	r20

00000bf2 <__fp_splitA>:
 bf2:	88 0f       	add	r24, r24
 bf4:	97 fb       	bst	r25, 7
 bf6:	99 1f       	adc	r25, r25
 bf8:	61 f0       	breq	.+24     	; 0xc12 <__fp_splitA+0x20>
 bfa:	9f 3f       	cpi	r25, 0xFF	; 255
 bfc:	79 f0       	breq	.+30     	; 0xc1c <__fp_splitA+0x2a>
 bfe:	87 95       	ror	r24
 c00:	08 95       	ret
 c02:	12 16       	cp	r1, r18
 c04:	13 06       	cpc	r1, r19
 c06:	14 06       	cpc	r1, r20
 c08:	55 1f       	adc	r21, r21
 c0a:	f2 cf       	rjmp	.-28     	; 0xbf0 <__fp_split3+0xe>
 c0c:	46 95       	lsr	r20
 c0e:	f1 df       	rcall	.-30     	; 0xbf2 <__fp_splitA>
 c10:	08 c0       	rjmp	.+16     	; 0xc22 <__fp_splitA+0x30>
 c12:	16 16       	cp	r1, r22
 c14:	17 06       	cpc	r1, r23
 c16:	18 06       	cpc	r1, r24
 c18:	99 1f       	adc	r25, r25
 c1a:	f1 cf       	rjmp	.-30     	; 0xbfe <__fp_splitA+0xc>
 c1c:	86 95       	lsr	r24
 c1e:	71 05       	cpc	r23, r1
 c20:	61 05       	cpc	r22, r1
 c22:	08 94       	sec
 c24:	08 95       	ret

00000c26 <__fp_zero>:
 c26:	e8 94       	clt

00000c28 <__fp_szero>:
 c28:	bb 27       	eor	r27, r27
 c2a:	66 27       	eor	r22, r22
 c2c:	77 27       	eor	r23, r23
 c2e:	cb 01       	movw	r24, r22
 c30:	97 f9       	bld	r25, 7
 c32:	08 95       	ret

00000c34 <__gesf2>:
 c34:	8a df       	rcall	.-236    	; 0xb4a <__fp_cmp>
 c36:	08 f4       	brcc	.+2      	; 0xc3a <__gesf2+0x6>
 c38:	8f ef       	ldi	r24, 0xFF	; 255
 c3a:	08 95       	ret

00000c3c <__mulsf3>:
 c3c:	0b d0       	rcall	.+22     	; 0xc54 <__mulsf3x>
 c3e:	c0 cf       	rjmp	.-128    	; 0xbc0 <__fp_round>
 c40:	b1 df       	rcall	.-158    	; 0xba4 <__fp_pscA>
 c42:	28 f0       	brcs	.+10     	; 0xc4e <__mulsf3+0x12>
 c44:	b6 df       	rcall	.-148    	; 0xbb2 <__fp_pscB>
 c46:	18 f0       	brcs	.+6      	; 0xc4e <__mulsf3+0x12>
 c48:	95 23       	and	r25, r21
 c4a:	09 f0       	breq	.+2      	; 0xc4e <__mulsf3+0x12>
 c4c:	a2 cf       	rjmp	.-188    	; 0xb92 <__fp_inf>
 c4e:	a7 cf       	rjmp	.-178    	; 0xb9e <__fp_nan>
 c50:	11 24       	eor	r1, r1
 c52:	ea cf       	rjmp	.-44     	; 0xc28 <__fp_szero>

00000c54 <__mulsf3x>:
 c54:	c6 df       	rcall	.-116    	; 0xbe2 <__fp_split3>
 c56:	a0 f3       	brcs	.-24     	; 0xc40 <__mulsf3+0x4>

00000c58 <__mulsf3_pse>:
 c58:	95 9f       	mul	r25, r21
 c5a:	d1 f3       	breq	.-12     	; 0xc50 <__mulsf3+0x14>
 c5c:	95 0f       	add	r25, r21
 c5e:	50 e0       	ldi	r21, 0x00	; 0
 c60:	55 1f       	adc	r21, r21
 c62:	62 9f       	mul	r22, r18
 c64:	f0 01       	movw	r30, r0
 c66:	72 9f       	mul	r23, r18
 c68:	bb 27       	eor	r27, r27
 c6a:	f0 0d       	add	r31, r0
 c6c:	b1 1d       	adc	r27, r1
 c6e:	63 9f       	mul	r22, r19
 c70:	aa 27       	eor	r26, r26
 c72:	f0 0d       	add	r31, r0
 c74:	b1 1d       	adc	r27, r1
 c76:	aa 1f       	adc	r26, r26
 c78:	64 9f       	mul	r22, r20
 c7a:	66 27       	eor	r22, r22
 c7c:	b0 0d       	add	r27, r0
 c7e:	a1 1d       	adc	r26, r1
 c80:	66 1f       	adc	r22, r22
 c82:	82 9f       	mul	r24, r18
 c84:	22 27       	eor	r18, r18
 c86:	b0 0d       	add	r27, r0
 c88:	a1 1d       	adc	r26, r1
 c8a:	62 1f       	adc	r22, r18
 c8c:	73 9f       	mul	r23, r19
 c8e:	b0 0d       	add	r27, r0
 c90:	a1 1d       	adc	r26, r1
 c92:	62 1f       	adc	r22, r18
 c94:	83 9f       	mul	r24, r19
 c96:	a0 0d       	add	r26, r0
 c98:	61 1d       	adc	r22, r1
 c9a:	22 1f       	adc	r18, r18
 c9c:	74 9f       	mul	r23, r20
 c9e:	33 27       	eor	r19, r19
 ca0:	a0 0d       	add	r26, r0
 ca2:	61 1d       	adc	r22, r1
 ca4:	23 1f       	adc	r18, r19
 ca6:	84 9f       	mul	r24, r20
 ca8:	60 0d       	add	r22, r0
 caa:	21 1d       	adc	r18, r1
 cac:	82 2f       	mov	r24, r18
 cae:	76 2f       	mov	r23, r22
 cb0:	6a 2f       	mov	r22, r26
 cb2:	11 24       	eor	r1, r1
 cb4:	9f 57       	subi	r25, 0x7F	; 127
 cb6:	50 40       	sbci	r21, 0x00	; 0
 cb8:	8a f0       	brmi	.+34     	; 0xcdc <__mulsf3_pse+0x84>
 cba:	e1 f0       	breq	.+56     	; 0xcf4 <__mulsf3_pse+0x9c>
 cbc:	88 23       	and	r24, r24
 cbe:	4a f0       	brmi	.+18     	; 0xcd2 <__mulsf3_pse+0x7a>
 cc0:	ee 0f       	add	r30, r30
 cc2:	ff 1f       	adc	r31, r31
 cc4:	bb 1f       	adc	r27, r27
 cc6:	66 1f       	adc	r22, r22
 cc8:	77 1f       	adc	r23, r23
 cca:	88 1f       	adc	r24, r24
 ccc:	91 50       	subi	r25, 0x01	; 1
 cce:	50 40       	sbci	r21, 0x00	; 0
 cd0:	a9 f7       	brne	.-22     	; 0xcbc <__mulsf3_pse+0x64>
 cd2:	9e 3f       	cpi	r25, 0xFE	; 254
 cd4:	51 05       	cpc	r21, r1
 cd6:	70 f0       	brcs	.+28     	; 0xcf4 <__mulsf3_pse+0x9c>
 cd8:	5c cf       	rjmp	.-328    	; 0xb92 <__fp_inf>
 cda:	a6 cf       	rjmp	.-180    	; 0xc28 <__fp_szero>
 cdc:	5f 3f       	cpi	r21, 0xFF	; 255
 cde:	ec f3       	brlt	.-6      	; 0xcda <__mulsf3_pse+0x82>
 ce0:	98 3e       	cpi	r25, 0xE8	; 232
 ce2:	dc f3       	brlt	.-10     	; 0xcda <__mulsf3_pse+0x82>
 ce4:	86 95       	lsr	r24
 ce6:	77 95       	ror	r23
 ce8:	67 95       	ror	r22
 cea:	b7 95       	ror	r27
 cec:	f7 95       	ror	r31
 cee:	e7 95       	ror	r30
 cf0:	9f 5f       	subi	r25, 0xFF	; 255
 cf2:	c1 f7       	brne	.-16     	; 0xce4 <__mulsf3_pse+0x8c>
 cf4:	fe 2b       	or	r31, r30
 cf6:	88 0f       	add	r24, r24
 cf8:	91 1d       	adc	r25, r1
 cfa:	96 95       	lsr	r25
 cfc:	87 95       	ror	r24
 cfe:	97 f9       	bld	r25, 7
 d00:	08 95       	ret

00000d02 <__tablejump2__>:
 d02:	ee 0f       	add	r30, r30
 d04:	ff 1f       	adc	r31, r31

00000d06 <__tablejump__>:
 d06:	05 90       	lpm	r0, Z+
 d08:	f4 91       	lpm	r31, Z
 d0a:	e0 2d       	mov	r30, r0
 d0c:	19 94       	eijmp

00000d0e <_exit>:
 d0e:	f8 94       	cli

00000d10 <__stop_program>:
 d10:	ff cf       	rjmp	.-2      	; 0xd10 <__stop_program>
